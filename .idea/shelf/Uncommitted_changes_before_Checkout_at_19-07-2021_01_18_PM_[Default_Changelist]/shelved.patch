Index: app/src/main/java/com/background/service/BackgroundLocationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n\r\n\r\npackage com.background.service;\r\n\r\nimport android.Manifest;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.ActivityManager;\r\nimport android.app.Service;\r\nimport android.bluetooth.BluetoothAdapter;\r\nimport android.bluetooth.BluetoothGatt;\r\nimport android.bluetooth.BluetoothGattCharacteristic;\r\nimport android.bluetooth.BluetoothGattService;\r\nimport android.bluetooth.BluetoothManager;\r\nimport android.content.ComponentName;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.ServiceConnection;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Location;\r\nimport android.location.LocationManager;\r\nimport android.net.TrafficStats;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.IBinder;\r\nimport android.os.Looper;\r\nimport android.os.Message;\r\nimport android.os.Messenger;\r\nimport android.provider.Settings;\r\nimport android.speech.tts.TextToSpeech;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.android.volley.Request;\r\nimport com.android.volley.VolleyError;\r\nimport com.ble.comm.Observable;\r\nimport com.ble.comm.ObserverManager;\r\nimport com.ble.util.BleUtil;\r\nimport com.clj.fastble.BleManager;\r\nimport com.clj.fastble.callback.BleGattCallback;\r\nimport com.clj.fastble.callback.BleNotifyCallback;\r\nimport com.clj.fastble.callback.BleReadCallback;\r\nimport com.clj.fastble.callback.BleScanCallback;\r\nimport com.clj.fastble.callback.BleWriteCallback;\r\nimport com.clj.fastble.data.BleDevice;\r\nimport com.clj.fastble.exception.BleException;\r\nimport com.clj.fastble.scan.BleScanRuleConfig;\r\nimport com.clj.fastble.utils.BleLog;\r\nimport com.clj.fastble.utils.HexUtil;\r\nimport com.constants.APIs;\r\nimport com.constants.AsyncResponse;\r\nimport com.constants.CheckConnectivity;\r\nimport com.constants.Constants;\r\nimport com.constants.ConstantsEnum;\r\nimport com.constants.DownloadPdf;\r\nimport com.constants.DriverLogResponse;\r\nimport com.constants.RequestResponse;\r\nimport com.constants.SaveDriverLogPost;\r\nimport com.constants.SharedPref;\r\nimport com.constants.ShellUtils;\r\nimport com.constants.ShippingPost;\r\nimport com.constants.Slidingmenufunctions;\r\nimport com.constants.SyncDataUpload;\r\nimport com.constants.TcpClient;\r\nimport com.constants.Utils;\r\nimport com.constants.VolleyRequest;\r\nimport com.driver.details.DriverConst;\r\nimport com.google.android.gms.common.ConnectionResult;\r\nimport com.google.android.gms.common.api.GoogleApiClient;\r\nimport com.google.android.gms.location.LocationListener;\r\nimport com.google.android.gms.location.LocationRequest;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.local.db.CTPatInspectionMethod;\r\nimport com.local.db.CertifyLogMethod;\r\nimport com.local.db.ConstantsKeys;\r\nimport com.local.db.DBHelper;\r\nimport com.local.db.DeferralMethod;\r\nimport com.local.db.DriverPermissionMethod;\r\nimport com.local.db.HelperMethods;\r\nimport com.local.db.InspectionMethod;\r\nimport com.local.db.LatLongHelper;\r\nimport com.local.db.LocationMethod;\r\nimport com.local.db.MalfunctionDiagnosticMethod;\r\nimport com.local.db.NotificationMethod;\r\nimport com.local.db.OdometerHelperMethod;\r\nimport com.local.db.RecapViewMethod;\r\nimport com.local.db.ShipmentHelperMethod;\r\nimport com.local.db.SyncingMethod;\r\nimport com.local.db.UpdateLogRecordMethod;\r\nimport com.messaging.logistic.EldActivity;\r\nimport com.messaging.logistic.Globally;\r\nimport com.messaging.logistic.LoginActivity;\r\nimport com.messaging.logistic.R;\r\nimport com.messaging.logistic.UILApplication;\r\nimport com.messaging.logistic.fragment.EldFragment;\r\nimport com.notifications.NotificationManagerSmart;\r\nimport com.shared.pref.CoDriverEldPref;\r\nimport com.shared.pref.MainDriverEldPref;\r\nimport com.squareup.okhttp.MediaType;\r\nimport com.squareup.okhttp.MultipartBuilder;\r\nimport com.squareup.okhttp.OkHttpClient;\r\nimport com.squareup.okhttp.Protocol;\r\nimport com.squareup.okhttp.RequestBody;\r\nimport com.squareup.okhttp.Response;\r\nimport com.wifi.settings.WiFiConfig;\r\n\r\nimport org.joda.time.DateTime;\r\nimport org.joda.time.Minutes;\r\nimport org.joda.time.Seconds;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.nio.charset.Charset;\r\nimport java.text.DecimalFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport java.util.UUID;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport dal.tables.OBDDeviceData;\r\nimport models.RulesResponseObject;\r\nimport obdDecoder.Decoder;\r\nimport com.ble.comm.Observer;\r\n\r\n// 27 jan 2021   --\r\npublic class BackgroundLocationService extends Service implements GoogleApiClient.ConnectionCallbacks,\r\n        GoogleApiClient.OnConnectionFailedListener, TextToSpeech.OnInitListener, LocationListener, Observer {\r\n\r\n    String TAG = \"Service\";\r\n    String TAG_OBD = \"OBD Service\";\r\n    String noObd = \"obd not connected\";\r\n\r\n    String obdEngineHours = \"0\", currentHighPrecisionOdometer = \"0\", obdOdometer = \"0\", obdTripDistance = \"0\", ignitionStatus = \"OFF\", HighResolutionDistance = \"0\", truckRPM = \"0\", apiReturnedSpeed = \"\";\r\n\r\n    int GPSSpeed = 0;\r\n    int timeInSec = -1;\r\n    int timeDuration = 2000;\r\n\r\n    int SecondDriver                        = 0;\r\n    final int UpdateOffLineStatus           = 2;\r\n    final int SaveShippingOffline           = 3;\r\n    final int SaveOdometerOffline           = 4;\r\n    final int GetOdometers18Days            = 6;\r\n    final int SaveCertifyLog                = 7;\r\n    final int SaveDriverLog                 = 8;\r\n    final int SaveInspectionMain            = 9;\r\n    final int SaveInspectionCo              = 10;\r\n    final int SaveCtPatInspMain             = 11;\r\n    final int SaveCtPatInspCo               = 12;\r\n    final int GetCtPat18DaysMainDriverLog   = 13;\r\n    final int GetCtPat18DaysCoDriverLog     = 14;\r\n    final int SaveDriverDeviceUsageLog      = 15;\r\n    final int SaveMalDiagnstcEvent          = 16;\r\n    final int SaveDeferralMain              = 17;\r\n    final int SaveDeferralCo                = 18;\r\n\r\n    final int GetRecapViewFlagMain          = 111;\r\n    final int GetRecapViewFlagCo            = 112;\r\n\r\n    final int SaveMainDriverLogData         = 1002;\r\n    final int SaveCoDriverLogData           = 1003;\r\n    final int Save2ndDriverOdoData          = 101;\r\n    int offSetFromServer                    = 0;\r\n    int offsetFromUTC                       = 0;\r\n    int VehicleSpeed                        = -1;\r\n    int recapApiAttempts                    = 0;\r\n    int updateOfflineApiRejectionCount      = 0;\r\n    int updateOfflineNoResponseCount        = 0;\r\n    int RePostDataCountMain                 = 0;\r\n    int RePostDataCountCo                   = 0;\r\n\r\n    int SpeedCounter                        = 60;      // initially it is 60 so that ELD rule is called instantly\r\n    int MaxSpeedCounter                     = 60;\r\n    int HalfSpeedCounter                    = 30;\r\n    int sameLocationCount                   = 0;\r\n\r\n    public static int obdVehicleSpeed       = -1;\r\n    public static int GpsVehicleSpeed       = -1;\r\n\r\n\r\n    //private FusedLocationProviderApi locationProvider = LocationServices.FusedLocationApi;\r\n    //private Location mLastLocation;\r\n    public static LocationRequest locationRequest;\r\n    public static GoogleApiClient mGoogleApiClient;\r\n\r\n    protected LocationManager locationManager;\r\n\r\n    int LocRefreshTime = 10;\r\n    int CheckInternetConnection = 2;\r\n    private static final long MIN_TIME_BW_UPDATES = 2 * 1000;   //30 sec. 30000 - 1/2 minute -- [960000 milli sec -- (16 minutes)]\r\n    private static final long MIN_TIME_LOCATION_UPDATES = 8 * 1000;   // 8 sec\r\n    private static final long OBD_TIME_LOCATION_UPDATES = 10 * 1000;   // 10 sec\r\n    private static final long IDLE_TIME_LOCATION_UPDATES = 3600 * 1000;   // 1 hour\r\n\r\n    VolleyRequest GetOdometerRequest, ctPatInsp18DaysRequest, saveDriverDeviceUsageLog;\r\n    VolleyRequest UpdateLocReqVolley, UpdateUserStatusVolley, GetRecapView18DaysData, SaveMalDiaEventRequest;\r\n    Map<String, String> params;\r\n    String DriverId = \"\", CoDriverId = \"\", DeviceId = \"\", VIN_NUMBER = \"\", VehicleId = \"\", CompareLocVal = \"\";\r\n    String ObdRestarted = \"OBD Restarted\";\r\n\r\n    int DriverType = 0;\r\n    boolean isStopService = false,  RestartObdFlag = false;\r\n    JSONArray shipmentArray, odometerArray, driverLogArray;\r\n    DBHelper dbHelper;\r\n    HelperMethods hMethods;\r\n    ShipmentHelperMethod shipmentHelper;\r\n    OdometerHelperMethod odometerHelper;\r\n    RecapViewMethod recapViewMethod;\r\n    OdometerHelperMethod odometerhMethod;\r\n    InspectionMethod inspectionMethod;\r\n    CTPatInspectionMethod ctPatInspectionMethod;\r\n    LocationMethod LocMethod;\r\n    LatLongHelper latLongHelper;\r\n    NotificationMethod notificationMethod;\r\n    DriverPermissionMethod driverPermissionMethod;\r\n    MalfunctionDiagnosticMethod malfunctionDiagnosticMethod;\r\n    DeferralMethod deferralMethod;\r\n\r\n    CheckConnectivity checkConnectivity;\r\n\r\n    Globally global;\r\n\r\n    MainDriverEldPref MainDriverPref;\r\n    CoDriverEldPref CoDriverPref;\r\n    NotificationManagerSmart mNotificationManager;\r\n    Constants constants;\r\n    ShippingPost postRequest;\r\n    ServiceCycle serviceCycle;\r\n    boolean IsLogApiACalled = false;\r\n    public static boolean IsRecapApiACalled = false;\r\n    // boolean Is30SecInterval = false;\r\n    boolean isWiredDataReceived = false;\r\n    boolean IsAlertTimeValid = false;\r\n    boolean isGpsUpdate      = false;\r\n    boolean IsOBDPingAllowed = false;\r\n    boolean isMalfncDataAlreadyPosting = false;\r\n    boolean isWiredObdRespond = false;\r\n    boolean isBleObdRespond = false;\r\n    boolean isEldBleFound = false;\r\n    public static boolean IsAutoChange = false; //, IsAutoLogSaved = false;\r\n\r\n    double latitude, longitude;\r\n    private Handler mHandler = new Handler();\r\n    File locDataFile;\r\n    private TextToSpeech tts;\r\n    String ViolationReason = \"\";\r\n    SaveDriverLogPost saveDriverLogPost;\r\n    CertifyLogMethod certifyLogMethod;\r\n    UpdateLogRecordMethod logRecordMethod;\r\n    TcpClient tcpClient;\r\n    OBDDeviceData data;\r\n    Decoder decoder;\r\n    WiFiConfig wifiConfig;\r\n    SyncingMethod syncingMethod;\r\n    JSONArray savedSyncedArray;\r\n    JSONArray defMainDriverArray = new JSONArray();\r\n    JSONArray defCoDriverArray = new JSONArray();\r\n\r\n    File syncingFile = new File(\"\");\r\n    File ViolationFile = new File(\"\");\r\n\r\n\r\n    // ---------- Wired OBD Client setup ----------\r\n\r\n    String ServerPackage = \"com.als.obd\";\r\n    String ServerService = \"com.als.obd.services.MainService\";\r\n    private ShellUtils.CommandResult obdShell;\r\n\r\n\r\n    Utils obdUtil;\r\n    private Messenger messenger = null; //used to make an RPC invocation\r\n    private boolean isBound = false;\r\n    private ServiceConnection connection;//receives callbacks from bind and unbind invocations\r\n    private Messenger replyTo = null; //invocation replies are processed by this Messenger\r\n    String AlsSendingData = \"\";\r\n    String AlsReceivedData = \"\";\r\n    String MobileUsage = \"\";\r\n    String TotalUsage = \"\";\r\n    long processStartTime = -1;\r\n    double tempOdo = 518927.60000000003;\r\n    int tempSpeed = 0;\r\n    int ignitionCount = 0;\r\n\r\n\r\n    private static final String SERVICE_UUID = \"00001000-0000-1000-8000-00805f9b34fb\";\r\n    private static final String CHARACTER_WRITE_UUID = \"00001001-0000-1000-8000-00805f9b34fb\";\r\n    private static final String CHARACTER_NOTIFY_UUID = \"00001002-0000-1000-8000-00805f9b34fb\";\r\n\r\n    // Bluetooth obd adapter decleration\r\n    private static final String TAG_BLE = \"BleService\";\r\n    private static final String TAG_BLE_CONNECT = \"BleConnect\";\r\n    private static final String TAG_BLE_OPERATION = \"BleOperation\";\r\n    boolean mIsScanning = false;\r\n    boolean isManualDisconnected = false;\r\n\r\n    int writeFailureCount = 0;\r\n    int isScanningCount = 0;\r\n    int writeFailureCountToStop = 0;\r\n    int bleScanCount = 0;\r\n\r\n    private BluetoothAdapter mBTAdapter;\r\n\r\n    BleDevice bleDevice;\r\n    private BluetoothGattService bluetoothGattService;\r\n    private BluetoothGattCharacteristic characteristic;\r\n    List<BluetoothGattService> bluetoothGattServices = new ArrayList<>();\r\n    List<BluetoothGattCharacteristic> characteristicList = new ArrayList<>();\r\n\r\n    String name = \"\";\r\n    String mac = \"\";\r\n\r\n\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    @SuppressLint(\"RestrictedApi\")\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n\r\n        Log.i(TAG, \"---------onCreate Service\");\r\n\r\n        global                  = new Globally();\r\n        dbHelper                = new DBHelper(getApplicationContext());\r\n        hMethods                = new HelperMethods();\r\n        shipmentHelper          = new ShipmentHelperMethod();\r\n        odometerHelper          = new OdometerHelperMethod();\r\n        odometerhMethod         = new OdometerHelperMethod();\r\n        recapViewMethod         = new RecapViewMethod();\r\n        LocMethod               = new LocationMethod();\r\n        latLongHelper           = new LatLongHelper();\r\n        notificationMethod      = new NotificationMethod();\r\n        syncingMethod           = new SyncingMethod();\r\n        driverPermissionMethod  = new DriverPermissionMethod();\r\n        malfunctionDiagnosticMethod = new MalfunctionDiagnosticMethod();\r\n        deferralMethod          = new DeferralMethod();\r\n\r\n        checkConnectivity       = new CheckConnectivity(getApplicationContext());\r\n        MainDriverPref          = new MainDriverEldPref();\r\n        CoDriverPref            = new CoDriverEldPref();\r\n        constants               = new Constants();\r\n        serviceCycle            = new ServiceCycle(getApplicationContext());\r\n        postRequest             = new ShippingPost(getApplicationContext(), requestResponse);\r\n        UpdateLocReqVolley      = new VolleyRequest(getApplicationContext());\r\n        UpdateUserStatusVolley  = new VolleyRequest(getApplicationContext());\r\n        GetRecapView18DaysData  = new VolleyRequest(getApplicationContext());\r\n        SaveMalDiaEventRequest  = new VolleyRequest(getApplicationContext());\r\n        mNotificationManager    = new NotificationManagerSmart(getApplicationContext());\r\n\r\n        saveDriverDeviceUsageLog= new VolleyRequest(getApplicationContext());\r\n        GetOdometerRequest      = new VolleyRequest(getApplicationContext());\r\n        ctPatInsp18DaysRequest  = new VolleyRequest(getApplicationContext());\r\n        inspectionMethod        = new InspectionMethod();\r\n        ctPatInspectionMethod   = new CTPatInspectionMethod();\r\n        logRecordMethod         = new UpdateLogRecordMethod();\r\n        certifyLogMethod        = new CertifyLogMethod();\r\n        saveDriverLogPost       = new SaveDriverLogPost(getApplicationContext(), saveLogRequestResponse);\r\n\r\n        data                    = new OBDDeviceData();\r\n        decoder                 = new Decoder();\r\n        wifiConfig              = new WiFiConfig();\r\n        tcpClient               = new TcpClient(obdResponseHandler);\r\n        tts                     = new TextToSpeech(getApplicationContext(), this);\r\n\r\n        mTimer                  = new Timer();\r\n        mTimer.schedule(timerTask, OBD_TIME_LOCATION_UPDATES, OBD_TIME_LOCATION_UPDATES);\r\n\r\n        DeviceId                = SharedPref.GetSavedSystemToken(getApplicationContext());\r\n        IsOBDPingAllowed        =  SharedPref.isOBDPingAllowed(getApplicationContext());\r\n        SharedPref.setServiceOnDestoryStatus(false, getApplicationContext());\r\n        SharedPref.saveBleScanCount(0, getApplicationContext());\r\n\r\n        createLocationRequest(MIN_TIME_LOCATION_UPDATES);\r\n\r\n        // check availability of play services\r\n        if (global.checkPlayServices(getApplicationContext())) {\r\n            // Building the GoogleApi client\r\n            buildGoogleApiClient();\r\n        } else {\r\n            locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n            requestLocationWithoutPlayServices();\r\n        }\r\n\r\n\r\n\r\n//  ------------- Wired OBD ----------\r\n        this.connection = new RemoteServiceConnection();\r\n        this.replyTo = new Messenger(new IncomingHandler());\r\n        SharedPref.SaveObdStatus(SharedPref.getObdStatus(getApplicationContext()), SharedPref.getObdLastStatusTime(getApplicationContext()), getApplicationContext());\r\n\r\n        BindConnection();\r\n\r\n        if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_BLE) {\r\n            bleInit();\r\n\r\n            if(!BleManager.getInstance().isConnected(bleDevice) && SharedPref.getObdStatus(getApplicationContext()) != Constants.BLE_DISCONNECTED){\r\n                SharedPref.SaveObdStatus(Constants.BLE_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n            }\r\n        }else{\r\n            if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_WIRED) {\r\n                checkWiredObdConnection(wifiConfig.IsAlsNetworkConnected(getApplicationContext()));\r\n            }\r\n        }\r\n\r\n        try{\r\n            //  ------------- OBD Log write initilization----------\r\n            obdUtil = new Utils(getApplicationContext());\r\n            obdUtil.createLogFile();\r\n            obdUtil.createAppUsageLogFile();\r\n            obdUtil.createExecTimeLogFile();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //  ------------- Wired OBD data response handler ----------\r\n    private class IncomingHandler extends Handler\r\n    {\r\n        @Override\r\n        public void handleMessage(Message msg)\r\n        {\r\n            final Bundle bundle = msg.getData();\r\n\r\n            String timeStamp = \"--\", vin = \"--\";\r\n            int speed = 0;\r\n\r\n            try {\r\n                timeStamp = bundle.getString(constants.OBD_TimeStamp);\r\n                obdOdometer = bundle.getString(constants.OBD_Odometer);\r\n                obdTripDistance = bundle.getString(constants.OBD_TripDistance);\r\n                ignitionStatus = bundle.getString(constants.OBD_IgnitionStatus);\r\n                truckRPM = bundle.getString(constants.OBD_RPM);\r\n                obdEngineHours = bundle.getString(constants.OBD_EngineHours);\r\n                vin = bundle.getString(constants.OBD_VINNumber);\r\n                speed = bundle.getInt(constants.OBD_Vss);\r\n\r\n                if(bundle.getString(constants.OBD_HighPrecisionOdometer) != null) {\r\n                    currentHighPrecisionOdometer = bundle.getString(constants.OBD_HighPrecisionOdometer);\r\n                }\r\n\r\n                sendBroadCast(getWiredData(vin, speed));\r\n\r\n                // save wired obd call response time to recheck later\r\n                 SharedPref.SetWiredObdCallTime(Globally.GetCurrentDateTime(), getApplicationContext());\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n            bundle.clear();\r\n\r\n            obdCallBackObservable(speed, vin, timeStamp, null);\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private void obdCallBackObservable(int speed, String vin, String timeStamp, String[] obdDataArray){\r\n\r\n        int OBD_LAST_STATUS = SharedPref.getObdStatus(getApplicationContext());\r\n        String last_obs_source_name = SharedPref.getObdSourceName(getApplicationContext());\r\n\r\n        try {\r\n            if(obdDataArray != null) {\r\n                obdEngineHours = \"0\"; currentHighPrecisionOdometer = \"0\"; obdOdometer = \"0\"; obdTripDistance = \"0\";\r\n                ignitionStatus = \"OFF\"; truckRPM = \"0\"; ;\r\n\r\n                if(obdDataArray.length > 14) {\r\n                    obdOdometer = obdDataArray[9];\r\n                    obdTripDistance = obdDataArray[14];\r\n                    truckRPM = obdDataArray[8];\r\n                    obdEngineHours = obdDataArray[10];\r\n                    currentHighPrecisionOdometer = obdDataArray[9];\r\n                    Globally.LATITUDE = obdDataArray[12] ;\r\n                    Globally.LONGITUDE = obdDataArray[13] ;\r\n\r\n                    if (Integer.valueOf(truckRPM) > 0) {\r\n                        ignitionStatus = \"ON\";\r\n                        if (constants.isValidFloat(currentHighPrecisionOdometer)) {\r\n                            // convert km to meter\r\n                            float floatOdoInMeter = Float.parseFloat(currentHighPrecisionOdometer) * 1000;\r\n                            currentHighPrecisionOdometer = \"\" + Math.round(floatOdoInMeter);\r\n                        }\r\n                    } else {\r\n                        ignitionStatus = \"OFF\";\r\n                    }\r\n                }\r\n            }else{\r\n                if(OBD_LAST_STATUS == constants.BLE_CONNECTED) {\r\n                   // constants.saveAppUsageLog(\"BleCallback: Array null\" ,  false, false, obdUtil);\r\n                    truckRPM = \"\";  obdOdometer = \"0\";  obdEngineHours = \"0\";\r\n                    speed = 0;  vin = \"\";  ignitionStatus = \"OFF\";\r\n                }\r\n            }\r\n\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        SharedPref.setVehicleVin(vin, getApplicationContext());\r\n        SharedPref.setVss(speed, getApplicationContext());\r\n        SharedPref.setRPM(truckRPM, getApplicationContext());\r\n        SharedPref.SetWiredObdOdometer(obdOdometer, getApplicationContext());\r\n        SharedPref.SetObdEngineHours(obdEngineHours, getApplicationContext());\r\n\r\n\r\n        // ---------------- temp data ---------------------\r\n           /*  ignitionStatus = \"ON\"; truckRPM = \"700\"; speed = 15; obdEngineHours = \"123959\";\r\n              ignitionCount++;\r\n              obdOdometer = String.valueOf(tempOdo);\r\n                tempOdo = tempOdo + 500;\r\n              currentHighPrecisionOdometer = obdOdometer;\r\n              SharedPref.SetWiredObdOdometer(obdOdometer, getApplicationContext());\r\n            SharedPref.SaveObdStatus(Constants.WIRED_CONNECTED, global.getCurrentDate(), getApplicationContext());\r\n            Log.d(\"tempOdo\", \"tempOdo: \" +tempOdo);\r\n*/\r\n\r\n        if(OBD_LAST_STATUS == constants.WIRED_CONNECTED || OBD_LAST_STATUS == constants.BLE_CONNECTED) {\r\n            isWiredObdRespond = true;\r\n            if (SharedPref.getVINNumber(getApplicationContext()).length() > 5) {\r\n\r\n                // ELD rule calling for Wired OBD\r\n                try {\r\n                    if (ignitionStatus.equals(\"ON\") && !truckRPM.equals(\"0\")) {\r\n\r\n                        Globally.IS_OBD_IGNITION = true;\r\n                        continueStatusPromotForPcYm(\"ON\", last_obs_source_name, global.getCurrentDate(), OBD_LAST_STATUS);\r\n\r\n                        // check Power Malfunction/Diagnostic event\r\n                        String PowerEventStatus = constants.isPowerDiaMalOccurred(currentHighPrecisionOdometer, ignitionStatus,\r\n                                obdEngineHours, DriverId, global, malfunctionDiagnosticMethod, getApplicationContext(), dbHelper);\r\n\r\n                        if(PowerEventStatus.length() > 0){\r\n                            if(PowerEventStatus.equals(constants.MalfunctionEvent)){\r\n                                SharedPref.savePowerMalfunctionStatus(true, global.getCurrentDate(), getApplicationContext());\r\n                                saveMalfunctionInTable( constants.PowerComplianceMalfunction,\r\n                                        getApplicationContext().getResources().getString(R.string.power_comp_mal_occured));\r\n\r\n                                constants.saveMalfncnStatus(getApplicationContext(), true);\r\n                                constants.saveAppUsageLog(\"OBD:\"+ OBD_LAST_STATUS + \" - saveMalfunctionInTable\", false, false, obdUtil);\r\n\r\n                            }else{\r\n                                constants.saveDiagnstcStatus(getApplicationContext(), true);\r\n                                saveMalfunctionInTable( constants.PowerDataDiagnostic,\r\n                                        getApplicationContext().getResources().getString(R.string.power_dia_occured));\r\n\r\n                                constants.saveAppUsageLog(\"OBD:\"+ OBD_LAST_STATUS + \" - saveDiagnstcInTable\", false, false, obdUtil);\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                        // check if Malfunction/Diagnostic event occurred in ECM disconnection\r\n                        if(malfunctionDiagnosticMethod.isDisconnected(DriverId, dbHelper)) {\r\n\r\n                            // clear Diagnostic event when wired connection is connected.\r\n                            SharedPref.saveEngSyncDiagnstcStatus(false, getApplicationContext());\r\n                            constants.saveDiagnstcStatus(getApplicationContext(), false);\r\n\r\n                            DateTime currentTime = global.getDateTimeObj(global.GetCurrentDateTime(), false);\r\n                            malfunctionDiagnosticMethod.updateOccEventTimeLog(currentTime, DriverId,\r\n                                    SharedPref.getVINNumber(getApplicationContext()), currentTime , currentTime,\r\n                                    getApplicationContext().getResources().getString(R.string.Connected), ConstantsKeys.DiagnosticEngSync, dbHelper, getApplicationContext());\r\n\r\n                            constants.saveAppUsageLog(\"OBD:\"+ OBD_LAST_STATUS + \" - Check Malfunction/Diagnostic  ECM disconnection status\", false, false, obdUtil);\r\n\r\n                        }\r\n\r\n\r\n                        isWiredDataReceived = true;\r\n\r\n                        double obdOdometerDouble = Double.parseDouble(currentHighPrecisionOdometer);\r\n                        String previousHighPrecisionOdometer = SharedPref.getHighPrecisionOdometer(getApplicationContext());\r\n\r\n                        // save current odometer for HOS calculation\r\n                        saveDayStartOdometer(currentHighPrecisionOdometer);\r\n\r\n                        String savedDate = SharedPref.getHighPrecesionSavedTime(getApplicationContext());\r\n                        String currentLogDate = global.GetCurrentDateTime();\r\n\r\n                        if (savedDate.length() == 0 && obdOdometerDouble > 0) {\r\n                            // save current HighPrecisionOdometer locally\r\n                            savedDate = currentLogDate;\r\n                            SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n                        }\r\n\r\n                        boolean isDrivingAllowed = true;\r\n                        if (SharedPref.isDrivingAllowed(getApplicationContext()) == false && speed >= 8) {\r\n                            final DateTime currentDateTime = global.getDateTimeObj(global.GetCurrentDateTime(), false);    // Current Date Time\r\n                            final DateTime savedDateTime = global.getDateTimeObj(SharedPref.getDrivingAllowedTime(getApplicationContext()), false);\r\n\r\n                            if (savedDateTime.toString().length() > 10) {\r\n                                int timeInSec = Seconds.secondsBetween(savedDateTime, currentDateTime).getSeconds();\r\n                                if (timeInSec > 20) {\r\n                                    isDrivingAllowed = true;\r\n                                    SharedPref.setDrivingAllowedStatus(true, \"\", getApplicationContext());\r\n                                } else {\r\n                                    isDrivingAllowed = false;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        double savedOdometer = Double.parseDouble(previousHighPrecisionOdometer);\r\n                        if (obdOdometerDouble >= savedOdometer) {    // needs for this check is to avoid the wrong auto change status because some times odometers are not coming\r\n\r\n                            double calculatedSpeedFromOdo = speed;\r\n\r\n                            if(OBD_LAST_STATUS == constants.WIRED_CONNECTED) {\r\n                                // calculating speed to comparing last saved odometer and current odometer (in meter) with time difference in seconds\r\n                                calculatedSpeedFromOdo = constants.calculateSpeedFromWiredTabOdometer(savedDate, currentLogDate,\r\n                                        previousHighPrecisionOdometer, currentHighPrecisionOdometer, getApplicationContext());\r\n                            }\r\n\r\n                            if (speed >= 8 || calculatedSpeedFromOdo >= 8) {\r\n                                SharedPref.setVehilceMovingStatus(true, getApplicationContext());\r\n                            } else {\r\n                                SharedPref.setVehilceMovingStatus(false, getApplicationContext());\r\n                            }\r\n\r\n                            if (isDrivingAllowed) {\r\n                                timeDuration = 2000;\r\n                                callRuleWithStatusWise(currentHighPrecisionOdometer, savedDate, vin, timeStamp, speed, calculatedSpeedFromOdo);\r\n                            }\r\n\r\n                            // check malfunction if valid position not coming..\r\n                            if(SharedPref.IsAllowMalfunction(getApplicationContext())  ) {  // SharedPref.IsAllowDiagnostic(getApplicationContext())\r\n                                checkPositionMalfunction(currentHighPrecisionOdometer, currentLogDate);\r\n                            }\r\n\r\n                            Globally.VEHICLE_SPEED = speed;\r\n\r\n                        }\r\n\r\n                        callWiredDataService(timeDuration);\r\n\r\n                    } else {\r\n                        speed = 0;\r\n                        Globally.IS_OBD_IGNITION = false;\r\n                        continueStatusPromotForPcYm(\"OFF\", last_obs_source_name, \"\", OBD_LAST_STATUS);\r\n                        SharedPref.SetTruckIgnitionStatusForContinue(\"OFF\", last_obs_source_name, \"\", getApplicationContext());\r\n                        SharedPref.setVss(speed, getApplicationContext());\r\n                        SharedPref.setVehilceMovingStatus(false, getApplicationContext());\r\n\r\n                        String savedDate = SharedPref.getHighPrecesionSavedTime(getApplicationContext());\r\n                        if (savedDate.length() == 0 && Double.parseDouble(currentHighPrecisionOdometer) > 0) {\r\n                            savedDate = global.GetCurrentDateTime();\r\n                            SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, global.GetCurrentDateTime(), getApplicationContext());\r\n                        }\r\n\r\n                        callRuleWithStatusWise(currentHighPrecisionOdometer, savedDate, vin, timeStamp, speed, 0);\r\n\r\n                        Globally.VEHICLE_SPEED = 0;\r\n\r\n                        callWiredDataService(Constants.SocketTimeout8Sec);\r\n\r\n                    }\r\n\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                    Globally.IS_OBD_IGNITION = false;\r\n                    Globally.VEHICLE_SPEED = -1;\r\n                    isWiredDataReceived = false;\r\n\r\n                    callWiredDataService(3000);\r\n\r\n                }\r\n\r\n            } else {\r\n                callWiredDataService(3000);\r\n            }\r\n\r\n        }else{\r\n            isWiredObdRespond = true;\r\n            // check in wire disconnect case but device is also not connected with ALS/OBD wifi ssid\r\n            if((OBD_LAST_STATUS == constants.WIRED_DISCONNECTED || OBD_LAST_STATUS == constants.BLE_DISCONNECTED) &&\r\n                    wifiConfig.IsAlsNetworkConnected(getApplicationContext()) == false) {\r\n\r\n                try {\r\n                    if(SharedPref.IsAllowMalfunction(getApplicationContext()) ||\r\n                            SharedPref.IsAllowDiagnostic(getApplicationContext()) ){\r\n                        DateTime disconnectTime = global.getDateTimeObj(SharedPref.getObdLastStatusTime(getApplicationContext()), false);\r\n                        DateTime currentTime = global.getDateTimeObj(global.GetCurrentDateTime(), false);\r\n\r\n                        if (disconnectTime != null && currentTime != null) {\r\n                            int timeInSec = Seconds.secondsBetween(disconnectTime, currentTime).getSeconds();\r\n                            if (timeInSec >= 70 ) {\r\n\r\n                                boolean isEngSyncDiaOccurred = SharedPref.isEngSyncDiagnstc(getApplicationContext());\r\n                                if (isEngSyncDiaOccurred == false &&\r\n                                        SharedPref.IsAllowDiagnostic(getApplicationContext())) {\r\n\r\n                                    SharedPref.saveEngSyncDiagnstcStatus(true, getApplicationContext());\r\n                                    constants.saveDiagnstcStatus(getApplicationContext(), true);\r\n\r\n                                    saveMalfunctionInTable( constants.ConstEngineSyncDiaEvent,\r\n                                            getApplicationContext().getResources().getString(R.string.eng_sync_dia_occured));\r\n\r\n\r\n                                    malfunctionDiagnosticMethod.updateOccEventTimeLog(currentTime, DriverId,\r\n                                            SharedPref.getVINNumber(getApplicationContext()), disconnectTime, currentTime,\r\n                                            getApplicationContext().getResources().getString(R.string.DisConnected), ConstantsKeys.DiagnosticEngSync, dbHelper, getApplicationContext());\r\n\r\n                                    if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_BLE){\r\n                                        global.ShowLocalNotification(getApplicationContext(),\r\n                                                getApplicationContext().getResources().getString(R.string.dia_event),\r\n                                                getApplicationContext().getResources().getString(R.string.eng_sync_dia_occured_ble_desc), 2090);\r\n                                    }else{\r\n                                        global.ShowLocalNotification(getApplicationContext(),\r\n                                                getApplicationContext().getResources().getString(R.string.dia_event),\r\n                                                getApplicationContext().getResources().getString(R.string.eng_sync_dia_occured_desc), 2090);\r\n                                    }\r\n\r\n                                    Globally.PlaySound(getApplicationContext());\r\n\r\n                                } else {\r\n\r\n                                    if(SharedPref.IsAllowMalfunction(getApplicationContext())) {\r\n                                        boolean isEngSyncMalOccurred = SharedPref.isEngSyncMalfunction(getApplicationContext());\r\n                                        if (isEngSyncMalOccurred == false) {\r\n\r\n                                            int totalEngSyncMissingMin = malfunctionDiagnosticMethod.getTotalEngSyncMissingMin(DriverId, dbHelper);\r\n                                            if (totalEngSyncMissingMin >= 20) {  // After 30 min it will become engine Sync Mal\r\n                                                SharedPref.saveEngSyncMalfunctionStatus(true, getApplicationContext());\r\n                                                constants.saveMalfncnStatus(getApplicationContext(), true);\r\n\r\n                                                saveMalfunctionInTable(constants.ConstEngineSyncMalEvent,\r\n                                                        getApplicationContext().getResources().getString(R.string.eng_sync_mal_occured));\r\n\r\n\r\n                                                malfunctionDiagnosticMethod.updateOccEventTimeLog(currentTime, DriverId,\r\n                                                        SharedPref.getVINNumber(getApplicationContext()), disconnectTime, currentTime,\r\n                                                        getApplicationContext().getResources().getString(R.string.DisConnected), ConstantsKeys.MalfunctionEngSync, dbHelper, getApplicationContext());\r\n\r\n\r\n                                                global.ShowLocalNotification(getApplicationContext(),\r\n                                                        getApplicationContext().getResources().getString(R.string.malfunction_event),\r\n                                                        getApplicationContext().getResources().getString(R.string.eng_sync_mal_occured), 2091);\r\n\r\n                                                Globally.PlaySound(getApplicationContext());\r\n\r\n                                            } else {\r\n                                                SharedPref.saveEngSyncMalfunctionStatus(false, getApplicationContext());\r\n                                                constants.saveMalfncnStatus(getApplicationContext(), false);\r\n                                            }\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                }catch (Exception e){\r\n                    e.printStackTrace();\r\n                }\r\n                callWiredDataService(4000);\r\n            }else {\r\n                callWiredDataService(8000);\r\n            }\r\n        }\r\n\r\n\r\n        // Sync app usage log to server (SAVE sync data service)\r\n        obdUtil.syncAppUsageLog(getApplicationContext(), DriverId);\r\n\r\n    }\r\n\r\n\r\n\r\n    void callRuleWithStatusWise(String currentHighPrecisionOdometer, String savedDate, String vin, String timeStamp, int speed, double calculatedSpeedFromOdo){\r\n        try{\r\n            String currentLogDate = global.GetCurrentDateTime();\r\n            String jobType = SharedPref.getDriverStatusId(getApplicationContext());\r\n            double intHighPrecisionOdometerInKm = (Double.parseDouble(currentHighPrecisionOdometer) * 0.001);\r\n            if (jobType.equals(global.DRIVING)) {\r\n\r\n                timeDuration = Constants.SocketTimeout10Sec;\r\n                if (constants.minDiff(savedDate, global, getApplicationContext()) > 0) {\r\n\r\n                    saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                            timeStamp, savedDate, \"DRIVING\", calculatedSpeedFromOdo);\r\n\r\n                }\r\n\r\n            } else if (jobType.equals(global.ON_DUTY)) {\r\n\r\n                // if speed is coming >8 then ELD rule is called after 8 sec to change the status to Driving as soon as.\r\n                if (speed >= 8 && calculatedSpeedFromOdo >= 8) {\r\n\r\n                    try {\r\n                        if (EldFragment.driverLogArray == null || EldFragment.driverLogArray.length() == 0) {\r\n                            EldFragment.driverLogArray = hMethods.getSavedLogArray(Integer.valueOf(DriverId), dbHelper);\r\n                        }\r\n                        boolean isYardMove = hMethods.isPCYM(EldFragment.driverLogArray);\r\n                        if(isYardMove){\r\n                            String CurrentCycleId = DriverConst.GetDriverCurrentCycle(DriverConst.CurrentCycleId, getApplicationContext());\r\n                            if(speed >= 32 && (CurrentCycleId.equals(Globally.CANADA_CYCLE_1) || CurrentCycleId.equals(Globally.CANADA_CYCLE_2))) {   // In Yard move\r\n                                timeDuration = Constants.SocketTimeout30Sec;\r\n                                saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                                        timeStamp, savedDate, \"OnDutyYM Speed: \" + speed, calculatedSpeedFromOdo);\r\n                            }else{\r\n                                // call ELD rule after 1 minute to improve performance\r\n                                if (constants.minDiff(savedDate, global, getApplicationContext()) > 0) {\r\n                                    saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                                            timeStamp, savedDate, \"OnDutyYM Speed: \" + speed, calculatedSpeedFromOdo);\r\n                                }\r\n                                timeDuration = Constants.SocketTimeout10Sec;\r\n                            }\r\n                        }else{\r\n                            timeDuration = Constants.SocketTimeout30Sec;\r\n                            saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                                    timeStamp, savedDate, \"OnDuty Speed: \" + speed, calculatedSpeedFromOdo);\r\n                        }\r\n\r\n                    }catch (Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                } else {\r\n                    if(speed == 0){\r\n                        timeDuration = Constants.SocketTimeout4Sec;\r\n                    }\r\n                    // call ELD rule after 1 minute to improve performance\r\n                    if (constants.minDiff(savedDate, global, getApplicationContext()) > 0) {\r\n                        saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                                timeStamp, savedDate, \"OnDuty Speed: \"+speed, calculatedSpeedFromOdo);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                // =================== For OFF Duty & Sleeper case =====================\r\n\r\n                if (speed <= 0 && calculatedSpeedFromOdo <= 0 ) {  //\r\n                    //   Log.d(\"ELD Rule\", \"data is correct for this status. No need to call ELD rule.\");\r\n                    if(speed == 0)\r\n                        timeDuration = Constants.SocketTimeout4Sec;\r\n                    SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n                } else {\r\n                    if (speed >= 8 && calculatedSpeedFromOdo >= 8 ) {    // if speed is coming >8 then ELD rule is called after 8 sec to change the status to Driving as soon as.\r\n\r\n                        if(jobType.equals(global.SLEEPER)){\r\n                            timeDuration = Constants.SocketTimeout30Sec;\r\n                            saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                                    timeStamp, savedDate, \"Sleeper-Speed: \"+speed, calculatedSpeedFromOdo);\r\n                        }else{\r\n                            if (EldFragment.driverLogArray == null || EldFragment.driverLogArray.length() == 0) {\r\n                                EldFragment.driverLogArray = hMethods.getSavedLogArray(Integer.valueOf(DriverId), dbHelper);\r\n                            }\r\n                            boolean isPersonal = hMethods.isPCYM(EldFragment.driverLogArray);\r\n                            if(isPersonal){\r\n                                if(SharedPref.isPersonalUse75KmCrossed(getApplicationContext()) ){\r\n                                    constants.saveAppUsageLog(\"PU exceeded 75km ELD rule called\", false, false, obdUtil);\r\n                                       saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                                            timeStamp, savedDate, \"PersonalUse-Speed: \"+speed, calculatedSpeedFromOdo);\r\n                                    timeDuration = Constants.SocketTimeout30Sec;\r\n                                }else{\r\n                                    timeDuration = Constants.SocketTimeout8Sec;\r\n                                    SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n                                }\r\n\r\n                            }else{\r\n                                timeDuration = Constants.SocketTimeout30Sec;\r\n                                saveLogWithRuleCall(currentHighPrecisionOdometer, currentLogDate, speed, vin, intHighPrecisionOdometerInKm,\r\n                                        timeStamp, savedDate, \"OffDuty-Speed: \"+speed, calculatedSpeedFromOdo);\r\n                            }\r\n\r\n                        }\r\n\r\n                    }else{\r\n                        SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n                    }\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    void callWiredDataService(int timeDuration){\r\n        try {\r\n            if (SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_WIRED ) {\r\n                if (!SharedPref.getUserName(getApplicationContext()).equals(\"\") &&\r\n                        !SharedPref.getPassword(getApplicationContext()).equals(\"\") &&\r\n                            getApplicationContext() != null) {\r\n                    new Handler().postDelayed(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            StartStopServer(constants.WiredOBD);\r\n                        }\r\n                    }, timeDuration);\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    String getWiredData(String vin, int speed){\r\n        return    \"<b>ignitionStatus:</b> \" + ignitionStatus + \"<br/>\" +\r\n                \"<b>Truck RPM:</b> \" + truckRPM + \"<br/>\" +\r\n                \"<b>Odometer:</b> \" + obdOdometer + \"<br/>\" +\r\n                \"<b>currentHighPrecisionOdometer:</b> \" + currentHighPrecisionOdometer + \"<br/>\" +\r\n                \"<b>Speed:</b> \" + speed + \"<br/>\" +\r\n                \"<b>VIN:</b> \" + vin + \"<br/>\" +\r\n                \"<b>Trip Distance:</b> \" + obdTripDistance + \"<br/>\" +\r\n                \"<b>EngineHours:</b> \" + obdEngineHours + \"<br/>\" ;\r\n    }\r\n\r\n\r\n    private void checkWiredObdConnection(boolean isAlsNetworkConnected){\r\n        int lastObdStatus = SharedPref.getObdStatus(getApplicationContext());\r\n        obdShell = ShellUtils.execCommand(\"cat /sys/class/power_supply/usb/type\", false);\r\n\r\n       if (obdShell.result == 0) {\r\n            //System.out.println(\"obd --> cat type --> \" + obdShell.successMsg);\r\n            if (obdShell.successMsg.contains(\"USB_DCP\")) {  // Connected State\r\n                if (lastObdStatus != Constants.WIRED_CONNECTED) {\r\n                    StartStopServer(constants.WiredOBD);\r\n                }\r\n\r\n                SharedPref.SaveObdStatus(Constants.WIRED_CONNECTED, global.getCurrentDate(), getApplicationContext());\r\n\r\n            } else {\r\n                // Disconnected State. Save only when last status was not already disconnected\r\n                if (isAlsNetworkConnected == false && lastObdStatus != constants.WIRED_DISCONNECTED) {\r\n\r\n                    SharedPref.SaveObdStatus(Constants.WIRED_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                    if (ignitionStatus.equals(\"OFF\")) {\r\n                        SharedPref.SetTruckIgnitionStatus(ignitionStatus, constants.WiredOBD, global.getCurrentDate(), obdEngineHours, currentHighPrecisionOdometer, getApplicationContext());\r\n                    }\r\n\r\n                    if(UILApplication.isActivityVisible()){\r\n                        showEldEcmAlert();\r\n                    }\r\n                }\r\n\r\n            }\r\n        } else {\r\n            if (isAlsNetworkConnected == false && lastObdStatus != Constants.WIFI_CONNECTED) {\r\n                SharedPref.SaveObdStatus(Constants.WIRED_ERROR, global.getCurrentDate(), getApplicationContext());\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    void showEldEcmAlert(){\r\n        try{\r\n            Intent intent = new Intent(ConstantsKeys.SuggestedEdit);\r\n            intent.putExtra(ConstantsKeys.PersonalUse75Km, false);\r\n            intent.putExtra(ConstantsKeys.IsEldEcmALert, true);\r\n            LocalBroadcastManager.getInstance(BackgroundLocationService.this).sendBroadcast(intent);\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    private void bleInit() {\r\n        // BLE check\r\n        if (!BleUtil.isBLESupported(this)) {\r\n            sendBroadCast(getResources().getString(R.string.ble_not_supported));\r\n            Log.d(TAG_BLE, getResources().getString(R.string.ble_not_supported));\r\n            return;\r\n        }\r\n\r\n        // BT check\r\n        BluetoothManager manager = BleUtil.getManager(this);\r\n        if (manager != null) {\r\n            mBTAdapter = manager.getAdapter();\r\n\r\n        }\r\n        if (mBTAdapter == null) {\r\n            sendBroadCast(getResources().getString(R.string.bt_unavailable));\r\n            Log.d(TAG_BLE, getResources().getString(R.string.bt_unavailable));\r\n            return;\r\n        }\r\n\r\n        if (!mBTAdapter.isEnabled()) {\r\n            mBTAdapter.enable();\r\n            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                 initilizeBle();\r\n                }\r\n            }, 4000);\r\n\r\n\r\n        }else{\r\n            initilizeBle();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void initilizeBle(){\r\n        BleManager.getInstance().init(getApplication());\r\n        BleManager.getInstance()\r\n                .enableLog(true)\r\n                .setReConnectCount(3, 5000)\r\n                .setConnectOverTime(20000)\r\n                .setOperateTimeout(10000);\r\n    }\r\n\r\n\r\n    private void checkPermissionsBeforeScanBle() {\r\n\r\n        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\r\n        boolean isConnected = BleManager.getInstance().isConnected(bleDevice);\r\n\r\n        if (!bluetoothAdapter.isEnabled()) {\r\n            bluetoothAdapter.enable();\r\n            sendBroadCast(\"BlueTooth was disabled. Turning on..\");\r\n            try {\r\n                Thread.sleep(4000);\r\n                BleManager.getInstance().disconnectAllDevice();\r\n                ObserverManager.getInstance().notifyObserver(bleDevice);\r\n                constants.saveAppUsageLog(\"BlueTooth was disabled. Turning on..\", false, false, obdUtil);\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n        }else{\r\n            if (constants.CheckGpsStatusToCheckMalfunction(getApplicationContext())) {\r\n\r\n                if (!mIsScanning && !isConnected) {\r\n\r\n                    // ignore scan after 5 attempts if device not found\r\n                    if(SharedPref.getBleScanCount(getApplicationContext()) < 5) {\r\n                        startScan();\r\n                    }else{\r\n                        if(bleScanCount == 5) {\r\n                            bleScanCount++;\r\n                            Globally.PlayNotificationSound(getApplicationContext());\r\n                            global.ShowLocalNotification(getApplicationContext(),\r\n                                    getApplicationContext().getResources().getString(R.string.BluetoothOBD),\r\n                                    getApplicationContext().getResources().getString(R.string.BleObdNotFound), 2096);\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                // some times scan not finished and continuesly scaning then we need this check\r\n                if(isScanningCount > 6 && mIsScanning){\r\n                    if(BleManager.getInstance() != null) {\r\n                        BleManager.getInstance().cancelScan();\r\n                        mIsScanning = false;\r\n                        isScanningCount = 0;\r\n                    }\r\n                }\r\n                isScanningCount++;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void startScan() {\r\n        isScanningCount = 0;\r\n        isEldBleFound = false;\r\n\r\n        BleManager.getInstance().scan(new BleScanCallback() {\r\n            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n            @Override\r\n            public void onScanStarted(boolean success) {\r\n                if (success) {\r\n                    mIsScanning = true;\r\n                    isBleObdRespond = false;\r\n                    sendBroadCast(\"Scan Started\");\r\n                    constants.saveAppUsageLog(\"BleCallback: ScanStarted\", false, false, obdUtil);\r\n                } else {\r\n                    constants.saveAppUsageLog(\"Start Bluetooth: Scan\" ,  false, false, obdUtil);\r\n                    sendBroadCast(\"Scanning\");\r\n                    mIsScanning = false;\r\n                    bleInit();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onLeScan(BleDevice bleDevice) {\r\n                super.onLeScan(bleDevice);\r\n            }\r\n\r\n            @Override\r\n            public void onScanning(BleDevice bleDevice) {\r\n\r\n                try {\r\n                    if (bleDevice.getName() != null) {\r\n                        if (bleDevice.getName().contains(\"ALSELD\") || bleDevice.getName().contains(\"SMBLE\")) {\r\n                            Log.d(\"getName\", \"getName: \" + bleDevice.getName());\r\n                            bleScanCount = 0;\r\n                            SharedPref.saveBleScanCount(0, getApplicationContext());\r\n\r\n                            isEldBleFound = true;\r\n                            sendBroadCast(\"Connecting\");\r\n                            connect(bleDevice);\r\n                            BleManager.getInstance().cancelScan();\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onScanFinished(List<BleDevice> scanResultList) {\r\n                mIsScanning = false;\r\n                sendBroadCast(\"Scan Finished\");\r\n                if (!isEldBleFound) {\r\n                    bleScanCount++;\r\n                    SharedPref.saveBleScanCount(bleScanCount, getApplicationContext());\r\n                    sendBroadCast(\"Bluetooth OBD not found.\");\r\n                    obdCallBackObservable(-1, SharedPref.getVehicleVin(getApplicationContext()), global.GetCurrentDateTime(), null);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    private void connect(final BleDevice bleDevice) {\r\n        BleManager.getInstance().connect(bleDevice, new BleGattCallback() {\r\n            @Override\r\n            public void onStartConnect() {\r\n                Log.d(TAG_BLE_CONNECT, \"onStartConnect\");\r\n                sendBroadCast(\"Connecting\");\r\n                isBleObdRespond = false;\r\n            }\r\n\r\n            @Override\r\n            public void onConnectFail(BleDevice bleDevice, BleException exception) {\r\n                Log.d(TAG_BLE_CONNECT, \"onConnectFail\");\r\n                constants.saveAppUsageLog(\"BleCallback: ConnectFail\" ,  false, false, obdUtil);\r\n                sendBroadCast(\"Connecting failed\");\r\n\r\n                ObserverManager.getInstance().notifyObserver(bleDevice);\r\n\r\n                if (SharedPref.getObdStatus(getApplicationContext()) != Constants.BLE_DISCONNECTED) {\r\n                    SharedPref.SaveObdStatus(Constants.BLE_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                }\r\n\r\n            }\r\n\r\n            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n            @Override\r\n            public void onConnectSuccess(BleDevice blueToothDevice, BluetoothGatt gatt, int status) {\r\n                Log.d(TAG_BLE_CONNECT, \"Connected Successfully\");\r\n\r\n                if (BleManager.getInstance().isConnected(bleDevice)) {\r\n                    isManualDisconnected = false;\r\n                    setDisconnectType(isManualDisconnected);\r\n\r\n                    setBleDevice(blueToothDevice);\r\n                    addObserver(blueToothDevice);\r\n                    name = bleDevice.getName();\r\n                    mac  = bleDevice.getMac();\r\n\r\n                  /*  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                        gatt.requestMtu(512);\r\n                    }*/\r\n\r\n                    bluetoothGattServices = new ArrayList<>();\r\n                    for (BluetoothGattService service : gatt.getServices()) {\r\n                        bluetoothGattServices.add(service);\r\n                    }\r\n\r\n                    if (bluetoothGattServices.size() > 2) {\r\n                        BluetoothGattService service = bluetoothGattServices.get(2);\r\n                        setBluetoothGattService(service);\r\n                        writeData();\r\n                    }else{\r\n                        constants.saveAppUsageLog(\"BleCallback: ConnectSuccess but gatt size is 0\" ,  false, false, obdUtil);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            @RequiresApi(api = Build.VERSION_CODES.N)\r\n            @Override\r\n            public void onDisConnected(boolean isActiveDisConnected, BleDevice bleDevice, BluetoothGatt gatt, int status) {\r\n\r\n                Log.d(TAG_BLE_CONNECT, \"onDisConnected\");\r\n                constants.saveAppUsageLog(\"BleCallback: DisConnected\" ,  false, false, obdUtil);\r\n                isBleObdRespond = false;\r\n                ObserverManager.getInstance().notifyObserver(bleDevice);\r\n                stopService(bleDevice,getCharacteristic());\r\n\r\n                sendBroadCast(\"BLE DisConnected - isManualDisconnected: \" +isManualDisconnected);\r\n\r\n                if (!isManualDisconnected()) {\r\n                    bleInit();\r\n                   // setScanRule();\r\n                    startScan();\r\n                }\r\n\r\n                // Reset data on disConnected\r\n                if(SharedPref.getObdStatus(getApplicationContext()) == constants.BLE_CONNECTED) {\r\n                    truckRPM = \"0\";\r\n                    obdOdometer = \"0\";\r\n                    obdEngineHours = \"0\";\r\n                    ignitionStatus = \"OFF\";\r\n                    SharedPref.SaveObdStatus(Constants.BLE_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                    obdCallBackObservable(-1, SharedPref.getVehicleVin(getApplicationContext()), global.GetCurrentDateTime(), null);\r\n\r\n                    if(UILApplication.isActivityVisible()){\r\n                        showEldEcmAlert();\r\n                    }\r\n                }\r\n\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    public void getCharacteristicListData() {\r\n        BluetoothGattService service = getBluetoothGattService();\r\n        characteristicList = new ArrayList<>();\r\n        if (service != null) {\r\n            for (BluetoothGattCharacteristic characteristic : service.getCharacteristics()) {\r\n                characteristicList.add(characteristic);\r\n            }\r\n        }\r\n    }\r\n\r\n    private BluetoothGattCharacteristic getBluetoothGattCharacteristic(int maxlength, int PROPERTY) {\r\n        BluetoothGattCharacteristic characteristic = null;\r\n        if (characteristicList.size() > maxlength) {\r\n            characteristic = characteristicList.get(maxlength);\r\n            if (PROPERTY > 0) {\r\n                setCharacteristic(characteristic);\r\n            }\r\n        }\r\n        return characteristic;\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    private void writeData(){\r\n\r\n        getCharacteristicListData();\r\n\r\n        BluetoothGattCharacteristic characteristic  = getBluetoothGattCharacteristic(0, BluetoothGattCharacteristic.PROPERTY_WRITE);\r\n\r\n        if(characteristic != null) {\r\n            String writeValue = \"\";\r\n            String uuidName = bleDevice.getName();\r\n            //final String requestData  = \"request:{source_id:\" + uuidName + \",events:[{5B6A,0,0,000000,000000,000000000000,1111,0,0,,0,0,0,0,0,0,0,57,79}]}\";\r\n            final String requestData = \"request:{source_id:\" + uuidName + \",events:[{5B6A,0,0,000000,000000,000000000000,1111,0,0,0,0,,0,0,0,0,0,0,0,57,79}]}\";    //{5B6A,0,0,000000,000000,000000000000,1111,0,0,,0,0,0,0,0,0,0,57,79}]\r\n\r\n            writeValue = BleUtil.convertStringToHex(requestData);\r\n            writeValue = writeValue.replaceAll(\" \", \"\");\r\n            byte[] bytes = BleUtil.invertStringToBytes(writeValue);\r\n\r\n            BleManager.getInstance().write(\r\n                    bleDevice,\r\n                    SERVICE_UUID    /*characteristic.getService().getUuid().toString()*/,\r\n                    CHARACTER_WRITE_UUID    /*characteristic.getUuid().toString()*/,\r\n                    bytes, // by,\r\n                    new BleWriteCallback() {\r\n\r\n                        @Override\r\n                        public void onWriteSuccess(final int current, final int total, final byte[] justWrite) {\r\n                            Log.d(TAG_BLE_OPERATION, \"onWriteSuccess\");\r\n                            sendBroadCast(\"Write data Success\");\r\n\r\n                            if(current == total) {\r\n                                // read ble data after write success\r\n                                readData();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onWriteFailure(final BleException exception) {\r\n                            Log.d(TAG_BLE_OPERATION, \"onWriteFailure\" + exception.toString());\r\n                            constants.saveAppUsageLog(\"onWriteFailure: \" +exception.toString() ,  false, false, obdUtil);\r\n                            sendBroadCast(\"Write data Failure: \" +exception.toString());\r\n                            mIsScanning = false;\r\n                            isBleObdRespond = false;\r\n\r\n                            ObserverManager.getInstance().notifyObserver(bleDevice);\r\n                            stopService(bleDevice,getCharacteristic());\r\n                            writeFailureCount++;\r\n                            if(writeFailureCount > 4){\r\n\r\n                                writeFailureCount = 0;\r\n\r\n                                if (mBTAdapter != null && mBTAdapter.isEnabled()) {\r\n                                    mBTAdapter.disable();\r\n                                }\r\n\r\n                            }\r\n\r\n                            if(writeFailureCountToStop == 4){\r\n                                bleScanCount = 6;\r\n                                SharedPref.saveBleScanCount(bleScanCount, getApplicationContext());\r\n                                Globally.PlayNotificationSound(getApplicationContext());\r\n                                global.ShowLocalNotification(getApplicationContext(),\r\n                                        getApplicationContext().getResources().getString(R.string.BluetoothOBD),\r\n                                        getApplicationContext().getResources().getString(R.string.BleObdNotConnected), 2097);\r\n                                writeFailureCountToStop = 0;\r\n                            }\r\n                            writeFailureCountToStop++;\r\n\r\n                            if (isManualDisconnected()) {\r\n                                new Handler().postDelayed(new Runnable() {\r\n                                    @Override\r\n                                    public void run() {\r\n                                        bleInit();\r\n                                    }\r\n                                }, 1500);\r\n                            }\r\n                        }\r\n                    });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    private void readData(){\r\n\r\n        BluetoothGattCharacteristic characteristic = getBluetoothGattCharacteristic(1, BluetoothGattCharacteristic.PROPERTY_READ);\r\n\r\n        if (characteristic != null) {\r\n            BleManager.getInstance().read(\r\n                    bleDevice,\r\n                    SERVICE_UUID    /*characteristic.getService().getUuid().toString()*/,\r\n                    CHARACTER_NOTIFY_UUID   /*characteristic.getUuid().toString()*/,\r\n                    new BleReadCallback() {\r\n\r\n                        @Override\r\n                        public void onReadSuccess(final byte[] data) {\r\n                            Log.d(TAG_BLE_OPERATION, \"onReadSuccess\");\r\n                            sendBroadCast(\"onReadSuccess\");\r\n                            notifyData();\r\n\r\n                        }\r\n\r\n                        @Override\r\n                        public void onReadFailure(final BleException exception) {\r\n                            Log.d(TAG_BLE_OPERATION, \"onReadFailure\");\r\n                            mIsScanning = false;\r\n                            isBleObdRespond = false;\r\n\r\n                            constants.saveAppUsageLog(\"ReadFailure: \" +exception.toString() ,  false, false, obdUtil);\r\n                            sendBroadCast(\"onReadFailure: \" +exception.toString());\r\n\r\n                        }\r\n                    });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    private void notifyData(){\r\n\r\n        final BluetoothGattCharacteristic characteristic = getBluetoothGattCharacteristic(1, BluetoothGattCharacteristic.PROPERTY_NOTIFY);\r\n\r\n        if (characteristic != null) {\r\n            BleManager.getInstance().notify(\r\n                    bleDevice,\r\n                    SERVICE_UUID    /*characteristic.getService().getUuid().toString()*/,\r\n                    CHARACTER_NOTIFY_UUID   /*characteristic.getUuid().toString()*/,\r\n                    false,\r\n                    new BleNotifyCallback() {\r\n\r\n                        @Override\r\n                        public void onNotifySuccess() {\r\n                            Log.d(TAG_BLE_OPERATION, \"onNotifySuccess\");\r\n                            isBleObdRespond = false;\r\n                            writeFailureCount = 2;\r\n                            writeFailureCountToStop = 0;\r\n                          //  String data = HexUtil.formatHexString(characteristic.getValue(), true);\r\n                          //  Log.d(\"Notify Success Data\", \"data: \" + data);\r\n                            constants.saveAppUsageLog(\"BleCallback: NotifySuccess\" ,  false, false, obdUtil);\r\n                            sendBroadCast(\"onNotifySuccess\");\r\n                        }\r\n\r\n                        @Override\r\n                        public void onNotifyFailure(final BleException exception) {\r\n\r\n                            Log.d(TAG_BLE_OPERATION, \"onReadFailure: \" + exception.toString());\r\n                            mIsScanning = false;\r\n                            constants.saveAppUsageLog(\"NotifyFailure: \" +exception.toString() ,  false, false, obdUtil);\r\n                            sendBroadCast(\"onNotifyFailure: \" + exception.toString());\r\n\r\n                            if (SharedPref.getObdStatus(getApplicationContext()) != Constants.BLE_DISCONNECTED) {\r\n                                SharedPref.SaveObdStatus(Constants.BLE_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                            }\r\n\r\n\r\n\r\n                        }\r\n\r\n                        @Override\r\n                        public void onCharacteristicChanged(byte[] data) {\r\n                            Log.d(\"onCharacteristicChanged\", \"onCharacteristicChanged\" );\r\n\r\n                            try {\r\n                                if (characteristic.getValue() != null && characteristic.getValue().length > 50) {\r\n                                    // temp data\r\n                              /*  if(isBleObdRespond == false){\r\n                                    SharedPref.SaveObdStatus(Constants.BLE_CONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                                    constants.saveAppUsageLog(\"BleCallback: Notify Data Changed\" ,  false, false, obdUtil);\r\n                                }\r\n                                sendBroadCast( \"Name: \" + bleDevice.getName()+ \", Mac: \"+ bleDevice.getMac());\r\n*/\r\n                                    String[] decodedArray = BleUtil.decodeDataChange(characteristic);\r\n                                    if (decodedArray != null && decodedArray.length >= 20) {  //11\r\n                                        if (isBleObdRespond == false) {\r\n                                            SharedPref.SaveObdStatus(Constants.BLE_CONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                                            constants.saveAppUsageLog(\"BleCallback: Notify Data Changed\", false, false, obdUtil);\r\n                                        }\r\n\r\n                                        isBleObdRespond = true;\r\n                                        int VehicleSpeed = Integer.valueOf(decodedArray[7]);\r\n                                        String VehicleVIN = decodedArray[10];\r\n\r\n                                 /*   // temp value assigned. updated firmware position in upper comment section\r\n                                    int VehicleSpeed = 0;\r\n                                    String VehicleVIN = decodedArray[8];\r\n*/\r\n\r\n                                        sendBroadCast(BleUtil.decodeDataChange(characteristic, bleDevice.getName(), bleDevice.getMac()));\r\n                                        obdCallBackObservable(VehicleSpeed, VehicleVIN, global.GetCurrentDateTime(), decodedArray);\r\n                                    } else {\r\n                                        if (isBleObdRespond == false) {\r\n                                            SharedPref.SaveObdStatus(Constants.BLE_CONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                                            constants.saveAppUsageLog(\"BleCallback: Notify Data Changed inComplete\", false, false, obdUtil);\r\n                                        }\r\n                                        isBleObdRespond = true;\r\n                                        sendBroadCast(\"Ble OBD connected but returns inComplete data. <br/> Contact with your company.\");\r\n                                    }\r\n\r\n                                }\r\n                            }catch (Exception e){\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n                    });\r\n        }\r\n    }\r\n\r\n\r\n    private void addObserver(BleDevice blueToothDevice){\r\n        bleDevice = blueToothDevice;\r\n        if (bleDevice == null) {\r\n            return;\r\n        }\r\n        ObserverManager.getInstance().addObserver(this);\r\n    }\r\n\r\n\r\n    private void setScanRule() {\r\n        BleScanRuleConfig scanRuleConfig = new BleScanRuleConfig.Builder()\r\n                .setServiceUuids(new UUID[0])      // Only scan the equipment of the specified service, optional\r\n                .setDeviceName(true, \"\")   // Only scan devices with specified broadcast name, optional\r\n                .setDeviceMac(\"\")                  // Only scan devices of specified mac, optional\r\n                .setAutoConnect(false)          // isAutoConnect - AutoConnect parameter when connecting, optional, default false\r\n                .setScanTimeOut(10000)              // Scan timeout time, optional, default 10 seconds\r\n                .build();\r\n        BleManager.getInstance().initScanRule(scanRuleConfig);\r\n    }\r\n\r\n    @Override\r\n    public void disConnected(BleDevice bleDevice) {\r\n        if (bleDevice != null && (bleDevice != null && bleDevice.getKey().equals(bleDevice.getKey()))) {\r\n            mIsScanning = false;\r\n            isBleObdRespond = false;\r\n            Log.d(TAG_BLE_CONNECT, \"Observer disConnected\");\r\n\r\n            sendBroadCast(\"disConnected\");\r\n        }\r\n    }\r\n\r\n    public void setDisconnectType(boolean isManual) {\r\n        this.isManualDisconnected = isManual;\r\n    }\r\n\r\n    public boolean isManualDisconnected() {\r\n        return isManualDisconnected;\r\n    }\r\n\r\n\r\n\r\n    public void setBleDevice(BleDevice bleDevice) {\r\n        this.bleDevice = bleDevice;\r\n    }\r\n\r\n    public BleDevice getBleDevice() {\r\n        return bleDevice;\r\n    }\r\n    public BluetoothGattService getBluetoothGattService() {\r\n        return bluetoothGattService;\r\n    }\r\n\r\n    public void setBluetoothGattService(BluetoothGattService bluetoothGattService) {\r\n        this.bluetoothGattService = bluetoothGattService;\r\n    }\r\n\r\n    public BluetoothGattCharacteristic getCharacteristic() {\r\n        return characteristic;\r\n    }\r\n\r\n    public void setCharacteristic(BluetoothGattCharacteristic characteristic) {\r\n        this.characteristic = characteristic;\r\n    }\r\n\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    public void stopService(BleDevice bleDevice, BluetoothGattCharacteristic characteristic){\r\n        try{\r\n            if(bleDevice != null) {\r\n                if (BleManager.getInstance().isConnected(bleDevice)) {\r\n\r\n                    String character = \"\";\r\n                    if(writeFailureCount > 1){\r\n                        character = CHARACTER_NOTIFY_UUID;\r\n                    }else{\r\n                        character = CHARACTER_WRITE_UUID;\r\n                    }\r\n                    Log.e(\"Character:\",\"\"+getCharacteristic().getUuid().toString());\r\n\r\n                    BleManager.getInstance().stopNotify(\r\n                            bleDevice,\r\n                            characteristic.getService().getUuid().toString(),\r\n                            character);\r\n\r\n                    isManualDisconnected = true;\r\n                    setDisconnectType(isManualDisconnected);\r\n                    BleManager.getInstance().clearCharacterCallback(bleDevice);\r\n                    ObserverManager.getInstance().deleteObserver(this);\r\n                    BleManager.getInstance().disconnect(bleDevice);\r\n                   // BleManager.getInstance().disconnectAllDevice();\r\n                    BleManager.getInstance().destroy();\r\n                    isBleObdRespond = false;\r\n                    mIsScanning = false;\r\n\r\n                    if (SharedPref.getObdStatus(getApplicationContext()) != Constants.BLE_DISCONNECTED) {\r\n                        SharedPref.SaveObdStatus(Constants.BLE_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                    }\r\n                    // stopSelf();\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void sendBroadCast(String data){\r\n        try {\r\n         //   if(SharedPref.isOBDScreen(getApplicationContext())) {\r\n                Intent intent = new Intent(\"ble_changed_data\");\r\n                intent.putExtra(\"decoded_data\", data);\r\n                LocalBroadcastManager.getInstance(BackgroundLocationService.this).sendBroadcast(intent);\r\n          //  }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void checkPositionMalfunction(String currentHighPrecisionOdometer, String currentLogDate){\r\n\r\n        try {\r\n\r\n            String lastCalledTime = SharedPref.getLastMalfCallTime(getApplicationContext());\r\n            if (lastCalledTime.length() == 0 ) {\r\n                SharedPref.setMalfCallTime(currentLogDate, getApplicationContext());\r\n            }\r\n\r\n            if (constants.minDiffMalfunction(lastCalledTime, global, getApplicationContext()) > 0) {\r\n\r\n                SharedPref.setMalfCallTime(currentLogDate, getApplicationContext());\r\n\r\n                if (constants.CheckGpsStatusToCheckMalfunction(getApplicationContext()) == false) {\r\n                    Globally.LATITUDE = \"0.0\";\r\n                    Globally.LONGITUDE = \"0.0\";\r\n                    if (SharedPref.getEcmObdLatitude(getApplicationContext()).length() > 4) {\r\n                        SharedPref.setEcmObdLocationWithTime(Globally.LATITUDE, Globally.LONGITUDE,\r\n                                currentHighPrecisionOdometer, global.GetCurrentDateTime(), getApplicationContext());\r\n                    }\r\n                }\r\n\r\n                // check malfunction\r\n                boolean isMalfunction = constants.isLocationMalfunctionOccured(getApplicationContext());\r\n                //Log.d(\"isMalfunction\", \"isMalfunction: \" + isMalfunction);\r\n\r\n                if (isMalfunction && SharedPref.isLocMalfunctionOccur(getApplicationContext()) == false) {\r\n                    SharedPref.saveLocMalfunctionOccurStatus(isMalfunction, currentLogDate, getApplicationContext());\r\n\r\n                    saveMalfunctionInTable(constants.PositionComplianceMalfunction,\r\n                            getApplicationContext().getResources().getString(R.string.pos_mal_occured));\r\n\r\n                    global.ShowLocalNotification(getApplicationContext(),\r\n                            getApplicationContext().getResources().getString(R.string.pos_mal_occured),\r\n                            getApplicationContext().getResources().getString(R.string.pos_mal_occured_desc), 2091);\r\n\r\n                    Globally.PlaySound(getApplicationContext());\r\n                }\r\n\r\n                constants.saveAppUsageLog(\"OBD:\" + \" - CheckPositionMalfunction\", false, false, obdUtil);\r\n\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    void saveLogWithRuleCall(String currentHighPrecisionOdometer, String currentLogDate, int speed, String vin, double intHighPrecisionOdometerInKm,\r\n                             String timeStamp, String savedDate, String status, double calculatedSpeedFromOdo){\r\n\r\n        try {\r\n\r\n            if(!status.equals(\"not_saved\")) {\r\n                // save current HighPrecisionOdometer in DB\r\n                SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n\r\n                // write wired OBD details in a text file and save into the SD card.\r\n                String obdSource;\r\n                if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_BLE) {\r\n                    obdSource = constants.WiredOBD;\r\n                }else{\r\n                    obdSource = constants.BleObd;\r\n                }\r\n                saveObdData(obdSource, vin, obdOdometer, String.valueOf(intHighPrecisionOdometerInKm),\r\n                        currentHighPrecisionOdometer, \"\", ignitionStatus, truckRPM, String.valueOf(speed),\r\n                        String.valueOf(calculatedSpeedFromOdo), obdTripDistance, timeStamp, savedDate);\r\n\r\n                if (speed > 200) {\r\n                    speed = -1;\r\n                }\r\n            }\r\n\r\n            callEldRuleForWired(speed, calculatedSpeedFromOdo);\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    void saveMalfunctionInTable(String malDiaType, String MalfunctionDefinition){\r\n\r\n        // save malfunction occur event to server with few inputs\r\n        JSONObject newOccuredEventObj = malfunctionDiagnosticMethod.GetJsonFromList(\r\n                DriverId, DeviceId, SharedPref.getVINNumber(getApplicationContext()),\r\n                DriverConst.GetDriverTripDetails(DriverConst.Truck, getApplicationContext()),\r\n                DriverConst.GetDriverDetails(DriverConst.CompanyId, getApplicationContext()),\r\n                SharedPref.getObdEngineHours(getApplicationContext()),\r\n                SharedPref.getHighPrecisionOdometer(getApplicationContext()),\r\n                SharedPref.getHighPrecisionOdometer(getApplicationContext()),\r\n                global.GetCurrentUTCTimeFormat(), malDiaType, MalfunctionDefinition\r\n        );\r\n\r\n\r\n        // save Occurred Mal/Dia events locally to get details later for clear them\r\n        JSONArray malArrayEvent = malfunctionDiagnosticMethod.getSavedMalDiagstcArrayEvents(Integer.parseInt(DriverId), dbHelper);\r\n        malArrayEvent.put(newOccuredEventObj);\r\n        malfunctionDiagnosticMethod.MalfnDiagnstcLogHelperEvents(Integer.parseInt(DriverId), dbHelper, malArrayEvent);\r\n\r\n\r\n        // save Occurred event locally until not posted to server\r\n        JSONArray malArray = malfunctionDiagnosticMethod.getSavedMalDiagstcArray(Integer.parseInt(DriverId), dbHelper);\r\n        malArray.put(newOccuredEventObj);\r\n        malfunctionDiagnosticMethod.MalfnDiagnstcLogHelper(Integer.parseInt(DriverId), dbHelper, malArray);\r\n\r\n        // call api\r\n        SaveMalfnDiagnstcLogToServer(malArray);\r\n\r\n    }\r\n\r\n\r\n    void saveDayStartOdometer(String currentHighPrecisionOdometer){\r\n        String savedDate = SharedPref.getDayStartSavedTime(getApplicationContext());\r\n        String currentLogDate = global.GetCurrentDateTime();\r\n        try {\r\n            currentHighPrecisionOdometer = currentHighPrecisionOdometer.split(\"\\\\.\")[0];\r\n            int odometerInMiles = constants.meterToMiles(Integer.parseInt(currentHighPrecisionOdometer));\r\n\r\n            if(odometerInMiles > 0) {\r\n                if (savedDate.length() > 0) {\r\n                    int dayDiff = constants.getDayDiff(savedDate, currentLogDate);\r\n                    String savedOdo = SharedPref.getDayStartOdometer(getApplicationContext());\r\n                    if (dayDiff != 0 || savedOdo.equals(\"0\")) {\r\n                        SharedPref.setDayStartOdometer(\"\" + odometerInMiles, currentLogDate, getApplicationContext());\r\n                    }\r\n                } else {\r\n                    SharedPref.setDayStartOdometer(\"\" + odometerInMiles, currentLogDate, getApplicationContext());\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // calculate speed from wifi OBD odometers (in meters) with time difference (in sec)\r\n    private double calculateSpeedFromWifiObdOdometer(String savedTime, String previousHighPrecisionOdometer,\r\n                                                     String currentHighPrecisionOdometer){\r\n        timeInSec = -1;\r\n        double speedInKm = -1;\r\n        double previousOdometer = Double.parseDouble(previousHighPrecisionOdometer);\r\n        double curentOdometer = Double.parseDouble(currentHighPrecisionOdometer);\r\n\r\n        previousOdometer = previousOdometer * 1000;\r\n        curentOdometer = curentOdometer * 1000;\r\n\r\n        double odometerDistance = curentOdometer - previousOdometer;\r\n        String currentDate = Globally.GetCurrentDateTime();\r\n\r\n        if(savedTime.length() > 10 && previousOdometer > 0) {\r\n            try{\r\n                DateTime savedDateTime = global.getDateTimeObj(savedTime, false);\r\n                DateTime currentDateTime = global.getDateTimeObj(currentDate, false);\r\n\r\n                timeInSec = Seconds.secondsBetween(savedDateTime, currentDateTime).getSeconds();    //Minutes.minutesBetween(savedDateTime, currentDateTime).getMinutes();\r\n                speedInKm = ( odometerDistance/1000.0f ) / ( timeInSec/3600.0f );\r\n\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n\r\n        }\r\n        return speedInKm;\r\n\r\n    }\r\n\r\n\r\n\r\n    void callEldRuleForWired( int speed, double calculatedSpeedFromOdo){\r\n        // call cycle rule\r\n        try {\r\n            VehicleSpeed = speed;\r\n            obdVehicleSpeed = (int) calculatedSpeedFromOdo;\r\n            serviceCycle.CalculateCycleTime(Integer.valueOf(DriverId), IsLogApiACalled, IsAlertTimeValid, VehicleSpeed,\r\n                    hMethods, dbHelper, latLongHelper, LocMethod, serviceCallBack, serviceError, notificationMethod, shipmentHelper,\r\n                    odometerhMethod, true, constants.WIRED_OBD, obdVehicleSpeed, GpsVehicleSpeed);\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        //   global.ShowLocalNotification(getApplicationContext(), \"Wired OBD data\", status + \", Speed \" + VehicleSpeed, 2009);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void saveObdData(String source, String vin, String odometer, String HighPrecisionOdometer,\r\n                             String obdOdometerInMeter, String correctedData, String ignition, String rpm,\r\n                             String speed, String speedCalculated, String tripDistance, String timeStamp,\r\n                             String previousDate){\r\n\r\n        boolean isDeviceLogEnabled = driverPermissionMethod.isDeviceLogEnabled(DriverId, dbHelper);\r\n\r\n        if(isDeviceLogEnabled) {\r\n\r\n            JSONObject obj = new JSONObject();\r\n            try {\r\n\r\n                obj.put(constants.obdSource, source);\r\n                obj.put(constants.obdOdometer, odometer);\r\n                obj.put(constants.obdHighPrecisionOdo, HighPrecisionOdometer);\r\n\r\n                if (source.equals(Constants.WifiOBD)) {\r\n\r\n                    if (correctedData.trim().length() > 0) {\r\n                        obj.put(constants.CorrectedData, correctedData);\r\n                    }\r\n\r\n                    try {\r\n                        String[] array = obdOdometerInMeter.split(\",  \");\r\n                        if (array.length > 0) {\r\n                            obj.put(constants.DecodedData, array[0]);\r\n\r\n                            obj.put(constants.PreviousLogDate, previousDate);\r\n                            obj.put(constants.CurrentLogDate, global.GetCurrentDateTime());\r\n                            obj.put(constants.obdCalculatedSpeed, array[1]);\r\n                        } else {\r\n                            obj.put(constants.CurrentLogDate, global.GetCurrentDateTime());\r\n                            obj.put(constants.DecodedData, obdOdometerInMeter);\r\n                        }\r\n\r\n                        obj.put(constants.WheelBasedVehicleSpeed, speed);\r\n\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n\r\n                } else {\r\n                    if (source.equals(constants.ApiData) || source.equals(constants.OfflineData)) {\r\n                        obj.put(constants.obdDetail, obdOdometerInMeter);\r\n                        obj.put(constants.LastRecordTime, timeStamp);\r\n                    } else {\r\n                        obj.put(constants.obdOdometerInMeter, obdOdometerInMeter);\r\n                        obj.put(constants.ObdRecordTime, timeStamp);\r\n                        obj.put(constants.PreviousLogDate, previousDate);\r\n                        obj.put(constants.CurrentLogDate, global.GetCurrentDateTime());\r\n                    }\r\n\r\n                    obj.put(constants.calculatedSpeed, speedCalculated);\r\n                    obj.put(constants.obdSpeed, speed);\r\n                    obj.put(constants.obdVINNumber, vin);\r\n                }\r\n\r\n\r\n                obj.put(constants.obdIgnitionStatus, ignition);\r\n                obj.put(constants.obdRPM, rpm);\r\n                obj.put(constants.apiReturnedSpeed, apiReturnedSpeed);\r\n                obj.put(constants.obdTripDistance, tripDistance);\r\n                obj.put(ConstantsKeys.Latitude, Globally.LATITUDE);\r\n                obj.put(ConstantsKeys.Longitude, Globally.LONGITUDE);\r\n\r\n                global.OBD_DataArray.put(obj);\r\n                obdUtil.writeToLogFile(obj.toString());\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    android.location.LocationListener locationListenerGPS = new android.location.LocationListener() {\r\n        @Override\r\n        public void onLocationChanged(Location location) {\r\n            Log.d(\"onLocationChanged\", \"---Latitude: \" + location.getLatitude() + \" -- Longitude: \" + location.getLongitude());\r\n            Globally.LATITUDE = \"\" +location.getLatitude();\r\n            Globally.LONGITUDE = \"\" +location.getLongitude();\r\n            Globally.LONGITUDE = Globally.CheckLongitudeWithCycle(Globally.LONGITUDE);\r\n          //  GpsVehicleSpeed = (int) location.getSpeed() * 18 / 5;\r\n            isGpsUpdate = true;\r\n            // GpsVehicleSpeed = 21;\r\n            // saving location with time info to calculate location mafunction event\r\n            int ObdStatus = SharedPref.getObdStatus(getApplicationContext());\r\n            if(ObdStatus == Constants.WIRED_CONNECTED ||\r\n                    ObdStatus == Constants.WIFI_CONNECTED ||\r\n                    ObdStatus == Constants.BLE_CONNECTED){\r\n                saveEcmLocationWithTime(Globally.LATITUDE, SharedPref.getHighPrecisionOdometer(getApplicationContext()));\r\n            }else{\r\n                saveEcmLocationWithTime(Globally.LATITUDE, SharedPref.getHighPrecisionOdometer(getApplicationContext()));\r\n            }\r\n\r\n            // getLocDegree(location);\r\n            //   global.ShowLocalNotification(getApplicationContext(), \"onLocationChanged\", \"Speed is: \" + GpsVehicleSpeed, 2003);\r\n        }\r\n\r\n        @Override\r\n        public void onStatusChanged(String provider, int status, Bundle extras) {\r\n        }\r\n\r\n        @Override\r\n        public void onProviderEnabled(String provider) {\r\n        }\r\n\r\n        @Override\r\n        public void onProviderDisabled(String provider) {\r\n        }\r\n    };\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    @Override\r\n    public int onStartCommand(Intent intent, int flags, int startId) {\r\n\r\n        Log.i(TAG, \"---------onStartCommand Service\");\r\n\r\n        if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_BLE) {\r\n\r\n            boolean isConnected = BleManager.getInstance().isConnected(bleDevice);\r\n            String bleStatus = SharedPref.isBlePing(getApplicationContext());\r\n\r\n            if(EldFragment.IsTruckChange){\r\n                if(!mIsScanning && !isConnected) {\r\n                    bleInit();\r\n                }\r\n            }else {\r\n                if (bleStatus.equals(\"start\")) {\r\n                    if (!mIsScanning && !isConnected) {\r\n                        writeFailureCountToStop = 0;\r\n                        bleInit();\r\n                    }\r\n                } else if(bleStatus.equals(\"stop\")) {\r\n                    // stop ble communication\r\n                    stopService(bleDevice, getCharacteristic());\r\n                    isBleObdRespond = false;\r\n                    SharedPref.SaveObdStatus(Constants.BLE_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                    constants.saveAppUsageLog(\"BleCallback: \"+getResources().getString(R.string.ble_disconnected_by_user) ,  false, false, obdUtil);\r\n                   // sendBroadCast(getResources().getString(R.string.ble_disconnected_by_user));\r\n                }\r\n            }\r\n            SharedPref.SetBlePingStatus(\"\", getApplicationContext());\r\n\r\n        }else if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_WIRED){\r\n            StartStopServer(constants.WiredOBD);\r\n        }\r\n\r\n        EldFragment.IsTruckChange = false;\r\n        UpdateDriverInfo();\r\n        // getLocation(false);\r\n\r\n        if (!SharedPref.getUserName(getApplicationContext()).equals(\"\") &&\r\n                !SharedPref.getPassword(getApplicationContext()).equals(\"\")) {\r\n\r\n            try {\r\n                if(Constants.isEldHome) {\r\n                    Constants.isEldHome = false;\r\n                    JSONArray driverLogArray = constants.GetDriversSavedArray(getApplicationContext(),\r\n                            MainDriverPref, CoDriverPref);\r\n                    if (global.isWifiOrMobileDataEnabled(getApplicationContext()) && driverLogArray.length() == 0) {  // sharedPrefDriverLog.GetOfflineData(getApplicationContext()) == true) {  // This check is used to save offline saved data to server first then online status will be changed.\r\n                        String VIN = SharedPref.getVINNumber(getApplicationContext());\r\n                        UpdateOfflineDriverLog(DriverId, CoDriverId, DeviceId, VIN,\r\n                                String.valueOf(GpsVehicleSpeed),\r\n                                String.valueOf(obdVehicleSpeed),\r\n                                constants.CheckGpsStatusToCheckMalfunction(getApplicationContext()));\r\n\r\n\r\n                        if (SharedPref.GetNewLoginStatus(getApplicationContext())) {\r\n                            JSONArray ctPatInsp18DaysArray = ctPatInspectionMethod.getCtPat18DaysInspectionArray(Integer.valueOf(DriverId), dbHelper);\r\n                            if (ctPatInsp18DaysArray.length() == 0) {\r\n                                String SelectedDate = global.GetCurrentDeviceDate();\r\n\r\n                                if (SharedPref.getDriverType(getApplicationContext()).equals(DriverConst.TeamDriver)) {\r\n                                    GetCtPatInspection18Days(DriverId, DeviceId, SelectedDate, GetCtPat18DaysMainDriverLog);\r\n                                    GetCtPatInspection18Days(CoDriverId, DeviceId, SelectedDate, GetCtPat18DaysCoDriverLog);\r\n                                } else {\r\n                                    GetCtPatInspection18Days(DriverId, DeviceId, SelectedDate, GetCtPat18DaysMainDriverLog);\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        Globally.VEHICLE_SPEED = -1;\r\n                        //VehicleSpeed = GpsVehicleSpeed;\r\n                    }\r\n\r\n                    Recap18DaysLog();\r\n                }\r\n\r\n            } catch (Exception e) {\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        //Make it stick to the notification panel so it is less prone to get cancelled by the Operating System.\r\n        return START_STICKY;\r\n    }\r\n\r\n    @SuppressLint(\"RestrictedApi\")\r\n    protected void createLocationRequest(long time) {\r\n        locationRequest = new LocationRequest();\r\n        locationRequest.setInterval(time);\r\n        locationRequest.setFastestInterval(time);\r\n        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\n\r\n    }\r\n\r\n\r\n    private void requestLocationWithoutPlayServices(){\r\n        try {\r\n            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n                // TODO: Consider calling\r\n                return;\r\n            }\r\n            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,\r\n                    MIN_TIME_LOCATION_UPDATES,\r\n                    10, locationListenerGPS);\r\n            Location loc = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);\r\n            if (loc != null) {\r\n                Globally.LATITUDE = \"\" + loc.getLatitude();\r\n                Globally.LONGITUDE = \"\" + loc.getLongitude();\r\n                Globally.LONGITUDE = Globally.CheckLongitudeWithCycle(Globally.LONGITUDE);\r\n            } else {\r\n                Globally.LATITUDE = \"0.0\";\r\n                Globally.LONGITUDE = \"0.0\";\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private Timer mTimer;\r\n\r\n    TimerTask timerTask = new TimerTask() {\r\n        @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n        @Override\r\n        public void run() {\r\n             Log.e(TAG, \"-----Running timerTask\");\r\n\r\n            if (!SharedPref.getUserName(getApplicationContext()).equals(\"\") &&\r\n                    !SharedPref.getPassword(getApplicationContext()).equals(\"\")) {\r\n\r\n                processStartTime = -1;\r\n                if (SpeedCounter == HalfSpeedCounter || SpeedCounter >= MaxSpeedCounter) {\r\n                    processStartTime = System.currentTimeMillis();\r\n                }\r\n\r\n                // get ALS Wifi ssid availability\r\n                boolean isAlsNetworkConnected   = wifiConfig.IsAlsNetworkConnected(getApplicationContext());\r\n                int getObdLastStatus = SharedPref.getObdStatus(getApplicationContext());\r\n\r\n                // communicate with wired OBD server if not connected\r\n                if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_WIRED) {\r\n                    checkWiredObdConnection(isAlsNetworkConnected);\r\n                    if(!isWiredObdRespond) {\r\n                       // constants.saveAppUsageLog(\"StartStopServer in Timer\" ,  false, false, obdUtil);\r\n                        StartStopServer(constants.WiredOBD);\r\n\r\n                        if(BleManager.getInstance() != null && BleManager.getInstance().isConnected(bleDevice)) {\r\n                            stopService(bleDevice, characteristic);\r\n                        }\r\n\r\n                    }else{\r\n                        String obdLastCallDate = SharedPref.getWiredObdCallTime(getApplicationContext());\r\n                        if(obdLastCallDate.length() > 10){\r\n                            int lastCalledMinDiff = constants.getMinDifference(obdLastCallDate, Globally.GetCurrentDateTime());\r\n                            if(lastCalledMinDiff > 0){\r\n                                StartStopServer(constants.WiredOBD);\r\n                            }\r\n                        }\r\n                    }\r\n                }else if (SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_BLE ){\r\n                    checkPermissionsBeforeScanBle();\r\n                }\r\n\r\n                try {\r\n                    // request for location if lat long is null\r\n                    if( Globally.LATITUDE.equals(\"0.0\") ||  Globally.LATITUDE.equals(\"\") ||  Globally.LATITUDE.equals(\"null\")){\r\n\r\n                        // check availability of play services\r\n                        if (global.checkPlayServices(getApplicationContext())) {\r\n                            createLocationRequest(MIN_TIME_LOCATION_UPDATES);\r\n                        } else {\r\n                            requestLocationWithoutPlayServices();\r\n                        }\r\n\r\n                    }\r\n                }catch (Exception e){\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                // networkUsage();\r\n\r\n                final boolean isGpsEnabled = constants.CheckGpsStatusToCheckMalfunction(getApplicationContext());\r\n                if(!isGpsEnabled){\r\n                    // GpsVehicleSpeed = -1;\r\n                    Globally.LATITUDE = \"0.0\";\r\n                    Globally.LONGITUDE = \"0.0\";\r\n                }\r\n\r\n\r\n                //  if(isBound && ( ignitionStatus.equals(\"ON\") && !truckRPM.equals(\"0\") ) )\r\n\r\n\r\n                if (SpeedCounter == HalfSpeedCounter || SpeedCounter >= MaxSpeedCounter) {\r\n\r\n                    if (!global.checkPlayServices(getApplicationContext()) && !isGpsUpdate) {\r\n                        requestLocationWithoutPlayServices();\r\n                    }\r\n\r\n                    isStopService = false;\r\n                    UpdateDriverInfo();\r\n\r\n                    if(SpeedCounter >= MaxSpeedCounter) {\r\n                        SpeedCounter = 0;\r\n                        // Update UTC date time after 60 seconds\r\n                        global.updateCurrentUtcTime(getApplicationContext());\r\n                    }else{\r\n                        SpeedCounter = SpeedCounter + LocRefreshTime;\r\n                    }\r\n\r\n                    try {\r\n\r\n                        if (global.isWifiOrMobileDataEnabled(getApplicationContext()) ) {\r\n\r\n                            if(constants.IsAlsServerResponding) {\r\n                                if(SpeedCounter == 0) {\r\n                                    driverLogArray = constants.GetDriversSavedArray(getApplicationContext(),\r\n                                                            MainDriverPref, CoDriverPref);\r\n                                    if (driverLogArray.length() == 0) {   // This check is used to save offline saved data to server first then online status will be changed.\r\n                                        String VIN = SharedPref.getVINNumber(getApplicationContext());\r\n\r\n                                        UpdateOfflineDriverLog(DriverId, CoDriverId, DeviceId, VIN,\r\n                                                String.valueOf(GpsVehicleSpeed),\r\n                                                String.valueOf(obdVehicleSpeed), isGpsEnabled);\r\n\r\n                                    } else {\r\n                                       // VehicleSpeed = GpsVehicleSpeed;\r\n                                        Globally.VEHICLE_SPEED = -1;\r\n\r\n                                        if(UILApplication.isActivityVisible() && Constants.IS_ACTIVE_ELD){\r\n                                             /*updateOfflineApiRejectionCount++;\r\n                                           if (updateOfflineApiRejectionCount > 1) {\r\n                                                updateOfflineApiRejectionCount = 0;\r\n                                                constants.IsAlsServerResponding = false;\r\n                                            }*/\r\n                                        }else {\r\n\r\n                                            saveActiveDriverData();\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }else{\r\n                                Globally.VEHICLE_SPEED = -1;\r\n                               // VehicleSpeed = GpsVehicleSpeed;\r\n                                updateOfflineApiRejectionCount++;\r\n                                if(updateOfflineApiRejectionCount > 2){\r\n                                    updateOfflineApiRejectionCount = 0;\r\n                                    constants.IsAlsServerResponding = true;\r\n                                }else{\r\n                                    if(updateOfflineApiRejectionCount > 1){\r\n                                        checkConnectivity.ConnectivityRequest(CheckInternetConnection, ConnectivityInterface);\r\n                                    }\r\n                                }\r\n\r\n                                // if last status was online then save offline status\r\n                               /* boolean connectionStatus = SharedPref.isOnline(getApplicationContext());\r\n                                if(connectionStatus){\r\n                                    constants.saveAppUsageLog(ConstantsEnum.StatusOffline,  false, false, obdUtil);\r\n                                }*/\r\n                                SharedPref.setOnlineStatus(false, getApplicationContext());\r\n\r\n                            }\r\n                        }else {\r\n\r\n                            constants.IsAlsServerResponding = true;\r\n                          //  VehicleSpeed = GpsVehicleSpeed;\r\n\r\n                            // if last status was online then save offline status\r\n                           /* boolean connectionStatus = SharedPref.isOnline(getApplicationContext());\r\n                            if(connectionStatus){\r\n                                constants.saveAppUsageLog(ConstantsEnum.StatusOffline,  false, false, obdUtil);\r\n                            }*/\r\n                            SharedPref.setOnlineStatus(false, getApplicationContext());\r\n\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                    // call Eld cycle rules with priority wise. ( 1: Wired Obd,    2: Wifi OBD,    3: API call OBD data )\r\n                    callCycleRulesWithPriority(getObdLastStatus,\r\n                            isAlsNetworkConnected); //(getObdLastStatus == constants.WIRED_CONNECTED ||  getObdLastStatus == constants.BLE_CONNECTED)\r\n\r\n                    Recap18DaysLog();\r\n\r\n                }else{\r\n                    SpeedCounter = SpeedCounter + LocRefreshTime;\r\n                }\r\n\r\n\r\n                // check WIFI connection\r\n                if( getObdLastStatus != constants.WIRED_CONNECTED  &&\r\n                        getObdLastStatus != Constants.BLE_CONNECTED &&\r\n                        (isAlsNetworkConnected && IsOBDPingAllowed )){    // check ALS SSID connection with IsOBDPingAllowed permission\r\n\r\n                    tcpClient.sendMessage(\"123456,can\");\r\n                    SharedPref.SaveConnectionInfo(constants.WifiOBD, Globally.GetCurrentDeviceDate(), getApplicationContext());\r\n\r\n\r\n                }else{\r\n                    SharedPref.SaveConnectionInfo(constants.DataMalfunction, \"\", getApplicationContext());\r\n                }\r\n\r\n\r\n\r\n                /*    mHandler.post(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            if(SpeedCounter == HalfSpeedCounter || SpeedCounter == MaxSpeedCounter) {\r\n                                if (isGpsEnabled)\r\n                                    getLocation(true);\r\n                            }\r\n                        }\r\n                    });\r\n*/\r\n\r\n\r\n                // saveExecutionTime(\"Loop\");\r\n                //  Debug.stopMethodTracing();\r\n\r\n            } else {\r\n                Log.e(\"Log\", \"--stop\");\r\n                StopService();\r\n\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n    void saveActiveDriverData(){\r\n        if(SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)) {\r\n            DriverType = Constants.MAIN_DRIVER_TYPE;\r\n        }else{\r\n            DriverType = Constants.CO_DRIVER_TYPE;\r\n        }\r\n\r\n        String SavedLogApi = \"\";\r\n        if (SharedPref.IsEditedData(getApplicationContext())) {\r\n            SavedLogApi = APIs.SAVE_DRIVER_EDIT_LOG_NEW;\r\n        } else {\r\n            SavedLogApi = APIs.SAVE_DRIVER_STATUS;\r\n        }\r\n\r\n        int socketTimeout;\r\n        int logArrayCount = driverLogArray.length();\r\n\r\n        if(logArrayCount > 0) {\r\n\r\n            if(logArrayCount < 3 ){\r\n                socketTimeout = constants.SocketTimeout10Sec;  //10 seconds\r\n            }else if(logArrayCount < 10){\r\n                socketTimeout = constants.SocketTimeout20Sec;  //20 seconds\r\n            }else{\r\n                socketTimeout = constants.SocketTimeout40Sec;  //40 seconds\r\n            }\r\n\r\n            saveDriverLogPost.PostDriverLogData(driverLogArray, SavedLogApi, socketTimeout, false, false, DriverType, SaveMainDriverLogData);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    void callCycleRulesWithPriority(int ConnectionType, boolean isAlsNetworkConnected){\r\n\r\n        try {\r\n            String currentDateStr = Globally.GetCurrentDeviceDate();\r\n            // 1st priority is Wired obd connection, after that wifi OBD and then API response OBD data\r\n            if (ConnectionType == constants.WIRED_CONNECTED ) {    // check wired obd\r\n                SharedPref.SaveConnectionInfo(constants.WiredOBD, currentDateStr, getApplicationContext());\r\n            }else if(ConnectionType == constants.BLE_CONNECTED){\r\n                SharedPref.SaveConnectionInfo(constants.BleObd, currentDateStr, getApplicationContext());\r\n            } else if (isAlsNetworkConnected == false || IsOBDPingAllowed == false) {    // check ALS SSID connection with IsOBDPingAllowed permission\r\n\r\n                // SharedPref.SetConnectionType(constants.ConnectionApi, getApplicationContext());\r\n\r\n                String lastConnectionInfo = SharedPref.GetConnectionInfo(Constants.CONNECTION_TYPE, getApplicationContext());\r\n                if (!lastConnectionInfo.equals(constants.WiredOBD) && !lastConnectionInfo.equals(constants.BleObd)) {\r\n                    try {\r\n\r\n                        if (global.isWifiOrMobileDataEnabled(getApplicationContext()) && constants.IsAlsServerResponding) {\r\n// -------------------------- need to verify this check -------------------------\r\n                            if (SpeedCounter != 40) {\r\n                                Thread.sleep(2000);\r\n\r\n                                if (obdVehicleSpeed != -1)\r\n                                    VehicleSpeed = obdVehicleSpeed;\r\n\r\n                                SharedPref.SaveConnectionInfo(constants.ApiData, currentDateStr, getApplicationContext());\r\n\r\n                                String jobType = SharedPref.getDriverStatusId(getApplicationContext());\r\n                                if ((jobType.equals(global.SLEEPER) || jobType.equals(global.OFF_DUTY)) && VehicleSpeed == 0) {\r\n                                    // No need to call ELD rule\r\n                                } else {\r\n                                    serviceCycle.CalculateCycleTime(Integer.valueOf(DriverId), IsLogApiACalled, IsAlertTimeValid, VehicleSpeed,\r\n                                            hMethods, dbHelper, latLongHelper, LocMethod, serviceCallBack, serviceError, notificationMethod, shipmentHelper,\r\n                                            odometerhMethod, isAlsNetworkConnected, constants.API, obdVehicleSpeed, GpsVehicleSpeed);\r\n\r\n                                    saveDummyData(\"Status-Online, Wifi status-\" + isAlsNetworkConnected, constants.ApiData);\r\n\r\n                                }\r\n                                //   global.ShowLocalNotification(getApplicationContext(), \"API data\", \"API obd Speed: \" + obdVehicleSpeed + \", Rule Vehicle Speed \" + VehicleSpeed, 2009);\r\n                            }\r\n\r\n                        }\r\n                        resetDataAfterCycleCall(true);\r\n\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (SpeedCounter != 40 && !lastConnectionInfo.equals(constants.DataMalfunction)) {\r\n                        saveObdData(constants.DataMalfunction, \"\", \"\", \"\",\r\n                                \"\", \"\", \"\", \"\", \"\", \"\",\r\n                                \"\", \"\", \"\");\r\n\r\n                        SharedPref.SaveConnectionInfo(constants.DataMalfunction, currentDateStr, getApplicationContext());\r\n\r\n                    }\r\n\r\n\r\n                }\r\n            } else {\r\n                SharedPref.SaveConnectionInfo(constants.DataMalfunction, currentDateStr, getApplicationContext());\r\n            }\r\n\r\n       /* File wiredObdLog = Globally.GetWiredLogFile(ConstantsKeys.WIRED_OBD_LOG, \"txt\");\r\n        if(wiredObdLog != null && wiredObdLog.exists())\r\n            wiredObdLog.delete();*/\r\n\r\n            // Sync wired OBD saved log to server (SAVE sync data service)\r\n            obdUtil.syncObdLogData(getApplicationContext(), DriverId, getDriverName());\r\n\r\n\r\n            // usage log record\r\n        /*    String lastUsageTime = SharedPref.getLastUsageDataSavedTime(getApplicationContext());\r\n            if (lastUsageTime.equals(\"\")) {\r\n                SaveDriverDeviceUsageLog(global.getCurrentDate());\r\n            } else {\r\n                DateTime lastUsageDateTime = global.getDateTimeObj(lastUsageTime, false);\r\n                DateTime currentDateTime = global.getDateTimeObj(global.getCurrentDate(), false);\r\n\r\n                int minDiff = Minutes.minutesBetween(lastUsageDateTime, currentDateTime).getMinutes();\r\n                if (minDiff >= 30) {\r\n                    SaveDriverDeviceUsageLog(global.getCurrentDate());\r\n                }\r\n            }*/\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // -------------- Reset OBD speed as default ----------------\r\n    private void resetDataAfterCycleCall(boolean isCalled){\r\n\r\n        CompareLocVal = \"\";\r\n        VehicleSpeed = -1;\r\n       // GpsVehicleSpeed = VehicleSpeed;\r\n        obdVehicleSpeed = VehicleSpeed;\r\n        SharedPref.setVss(VehicleSpeed, getApplicationContext());\r\n\r\n        if(isCalled) {\r\n            IsLogApiACalled = true;\r\n            //  SetLocIntervalForBatterySaver();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.ECLAIR)\r\n    void StopService(){\r\n        isStopService = true;\r\n        try {\r\n            mTimer.cancel();\r\n            mTimer = null;\r\n        } catch (Exception e) {\r\n        }\r\n        stopForeground(true);\r\n        stopSelf();\r\n    }\r\n\r\n\r\n    String getDriverName(){\r\n        String driverName = \"\";\r\n        try {\r\n            if(SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)){\r\n                driverName = DriverConst.GetDriverDetails( DriverConst.DriverName, getApplicationContext());\r\n            }else{\r\n                driverName = DriverConst.GetCoDriverDetails( DriverConst.CoDriverName, getApplicationContext());\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return driverName;\r\n    }\r\n\r\n    private void getDriverIDs(){\r\n\r\n        String driverName = \"\",  mainDriverName = \"\";\r\n        try {\r\n            mainDriverName = DriverConst.GetDriverDetails( DriverConst.DriverName, getApplicationContext());\r\n            if(Slidingmenufunctions.usernameTV != null) {driverName = Slidingmenufunctions.usernameTV.getText().toString();}\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n\r\n            driverName = getDriverName();\r\n            //  Log.d(\"driverName\", \"--driverName: \" + driverName);\r\n        }\r\n\r\n\r\n        try {\r\n            if (SharedPref.getDriverType(getApplicationContext()).equals(DriverConst.SingleDriver)) {\r\n                DriverId        = SharedPref.getDriverId(getApplicationContext());\r\n                CoDriverId      = \"\";\r\n                DriverType      = Constants.MAIN_DRIVER_TYPE;\r\n            } else {\r\n                if(driverName.equalsIgnoreCase(mainDriverName)){\r\n                    // pass driver and co driver id in the object (DriverId and CoDriverId).\r\n                    DriverId        =  DriverConst.GetDriverDetails(DriverConst.DriverID, getApplicationContext());\r\n                    CoDriverId      =  DriverConst.GetCoDriverDetails(DriverConst.CoDriverID, getApplicationContext());\r\n                }else{\r\n                    // Exchange driver and co driver id when co driver is logged In.\r\n                    CoDriverId      =  DriverConst.GetDriverDetails(DriverConst.DriverID, getApplicationContext());\r\n                    DriverId        =  DriverConst.GetCoDriverDetails(DriverConst.CoDriverID, getApplicationContext());\r\n                }\r\n\r\n                SharedPref.setDriverId(DriverId, getApplicationContext());\r\n\r\n            }\r\n\r\n            if (SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)) {\r\n                DriverType      = Constants.MAIN_DRIVER_TYPE;\r\n            }else{\r\n                DriverType =Constants.CO_DRIVER_TYPE;\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n        //   Log.d(ConstantsKeys.DriverId, \"DriverId: \" + DriverId);\r\n\r\n    }\r\n\r\n\r\n    void UpdateDriverInfo(){\r\n\r\n        getDriverIDs();\r\n\r\n        if (SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)) {  // If Current driver is Main Driver\r\n            String offset = DriverConst.GetDriverSettings(DriverConst.OffsetHours, getApplicationContext());\r\n            if (offset.length() > 0) {\r\n                offSetFromServer = Integer.valueOf(offset);\r\n            }\r\n\r\n        } else {     // If Current driver is Co Driver\r\n\r\n            String offset = DriverConst.GetCoDriverSettings(DriverConst.CoOffsetHours, getApplicationContext());\r\n            if (offset.length() > 0) {\r\n                offSetFromServer = Integer.valueOf(offset);\r\n            }\r\n\r\n        }\r\n\r\n        VIN_NUMBER          = SharedPref.getVINNumber(getApplicationContext());\r\n        VehicleId           = SharedPref.getVehicleId(getApplicationContext());\r\n        DeviceId            = SharedPref.GetSavedSystemToken(getApplicationContext());\r\n        IsOBDPingAllowed    = SharedPref.isOBDPingAllowed(getApplicationContext());\r\n\r\n        DateTime currentSavedDate;\r\n        String currentSavedTime = SharedPref.getSystemSavedDate(getApplicationContext());\r\n        if(currentSavedTime.length() > 10){\r\n            currentSavedDate = new DateTime(global.getDateTimeObj(currentSavedTime, false));\r\n            currentSavedDate = currentSavedDate.plusMinutes(1);\r\n            SharedPref.setCurrentDate(currentSavedDate.toString(), getApplicationContext());\r\n        }else{\r\n            offsetFromUTC = (int) global.GetTimeZoneOffSet();\r\n            if(offsetFromUTC == offSetFromServer) {\r\n                currentSavedDate = new DateTime(global.getDateTimeObj(global.GetCurrentDateTime(), false)); //GetCurrentUTCTimeFormat\r\n                SharedPref.setCurrentDate(currentSavedDate.toString(), getApplicationContext());\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    void Recap18DaysLog(){\r\n        try {\r\n\r\n            JSONArray recapArray = recapViewMethod.getSavedRecapView18DaysArray(Integer.valueOf(DriverId), dbHelper);\r\n            if(recapArray == null || recapArray.length() == 0) {\r\n                if(!IsRecapApiACalled) {\r\n\r\n                    if(SharedPref.getDriverType( getApplicationContext() ).equals(DriverConst.TeamDriver)){\r\n                        String MainDriverId        =  DriverConst.GetDriverDetails(DriverConst.DriverID, getApplicationContext());\r\n                        String CoDriverId      =  DriverConst.GetCoDriverDetails(DriverConst.CoDriverID, getApplicationContext());\r\n\r\n                        GetRecapView18DaysData(MainDriverId, DeviceId, GetRecapViewFlagMain);\r\n                        GetRecapView18DaysData(CoDriverId, DeviceId, GetRecapViewFlagCo);\r\n                    }else{\r\n                        GetRecapView18DaysData(DriverId, DeviceId, GetRecapViewFlagMain);\r\n                    }\r\n\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public IBinder onBind(Intent intent) {\r\n        Log.d(TAG,\"---onBind\");\r\n        return null;\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)\r\n    public void onDestroy() {\r\n\r\n        if(!isStopService) {\r\n\r\n            Log.d(\"---onDestroy service_re\", ConstantsEnum.StatusAppKilled );\r\n            // save service status log\r\n\r\n            Intent intent = new Intent(constants.packageName);\r\n            intent.putExtra(\"location\", \"torestore\");\r\n            sendBroadcast(intent);\r\n        }else{\r\n\r\n            Log.d(\"---onDestroy service \", ConstantsEnum.StatusServiceStopped );\r\n\r\n            try {\r\n                StopLocationUpdates();\r\n                stopService(bleDevice, characteristic);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_BLE) {\r\n                //  ------------- BLE OBD ----------\r\n                  stopService(bleDevice, characteristic);\r\n            }else {\r\n                //  ------------- Wired OBD ----------\r\n                if(isBound){\r\n                    StartStopServer(\"stop\");\r\n                    this.unbindService(connection);\r\n                    isBound = false;\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        SharedPref.setServiceOnDestoryStatus(true, getApplicationContext());\r\n        Log.i(TAG, \"---------onDestroy Service method\");\r\n\r\n\r\n    }\r\n\r\n\r\n    protected void StopLocationUpdates() {\r\n        try {\r\n            if (mGoogleApiClient.isConnected()) {\r\n                stopForeground(true);\r\n                LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, (LocationListener) this);\r\n                mGoogleApiClient.disconnect();\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /* ================== Update Offline Driver Log =================== */\r\n    void UpdateOfflineDriverLog(final String DriverId, final String CoDriverId, final String DeviceId, final String VIN,\r\n                                String GpsSpeed, String obdSpeed, boolean isGpsEnabled ){\r\n\r\n        params = new HashMap<String, String>();\r\n        params.put(ConstantsKeys.DriverId, DriverId);\r\n        params.put(ConstantsKeys.CoDriverId, CoDriverId);\r\n        params.put(ConstantsKeys.DeviceId, DeviceId);\r\n        params.put(ConstantsKeys.VIN, VIN );\r\n\r\n        params.put(ConstantsKeys.GPSSpeed, GpsSpeed);\r\n        params.put(ConstantsKeys.obdSpeed, obdSpeed);\r\n        params.put(ConstantsKeys.isGpsEnabled, String.valueOf(isGpsEnabled) );\r\n\r\n        UpdateUserStatusVolley.executeRequest(Request.Method.POST, APIs.UPDATE_OFF_LINE_DRIVER_LOG , params,\r\n                UpdateOffLineStatus, Constants.SocketTimeout10Sec, ResponseCallBack, ErrorCallBack);\r\n    }\r\n\r\n\r\n\r\n\r\n    //*================== Get Driver's 18 Days Recap View Log Data ===================*//*\r\n    void GetRecapView18DaysData(final String DriverId, final String DeviceId , int GetRecapViewFlag){\r\n\r\n        if(recapApiAttempts < 2) {\r\n            IsRecapApiACalled = true;\r\n\r\n            DateTime currentDateTime = new DateTime(global.GetCurrentDateTime());\r\n            DateTime startDateTime = global.GetStartDate(currentDateTime, 15);\r\n            String StartDate = global.ConvertDateFormatMMddyyyy(String.valueOf(startDateTime));\r\n            String EndDate = global.GetCurrentDeviceDate();  // current Date\r\n\r\n            params = new HashMap<String, String>();\r\n            params.put(ConstantsKeys.DriverId, DriverId);\r\n            params.put(ConstantsKeys.DeviceId, DeviceId);\r\n            params.put(ConstantsKeys.ProjectId, global.PROJECT_ID);\r\n            params.put(ConstantsKeys.DrivingStartTime, StartDate);\r\n            params.put(ConstantsKeys.DriverLogDate, EndDate);\r\n\r\n            GetRecapView18DaysData.executeRequest(Request.Method.POST, APIs.GET_DRIVER_LOG_18_DAYS_DETAILS, params, GetRecapViewFlag,\r\n                    Constants.SocketTimeout50Sec, ResponseCallBack, ErrorCallBack);\r\n        }\r\n        recapApiAttempts++;\r\n    }\r\n\r\n\r\n    /*================== Upload Driver Updated Log Record Data ===================*/\r\n    void SAVE_DRIVER_RECORD_LOG(final JSONArray geoData, final boolean isLoad, final boolean IsRecap, int socketTimeout){\r\n        saveDriverLogPost.PostDriverLogData(geoData, APIs.UPDATE_DRIVER_LOG_RECORD, socketTimeout, isLoad, IsRecap, 1, SaveDriverLog);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    void UploadSavedShipmentData(){\r\n\r\n        try{\r\n            shipmentArray = new JSONArray();\r\n            shipmentArray = shipmentHelper.getSavedShipmentArray(Integer.valueOf(global.PROJECT_ID), dbHelper);\r\n            if(shipmentArray.length() > 0 ){\r\n                /*if (shipmentArray.length() == 1 ) {\r\n                    if (!shipmentHelper.IsPosted(shipmentArray)){\r\n                        postRequest.PostListingData(shipmentArray, APIs.SAVE_SHIPPING_DOC_NUMBER, SaveShippingOffline);\r\n                    }\r\n                }else{*/\r\n                postRequest.PostListingData(shipmentArray, APIs.SAVE_SHIPPING_DOC_NUMBER, SaveShippingOffline);\r\n                //  }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    void UploadSavedOdometerData(){\r\n        try{\r\n            odometerArray = new JSONArray();\r\n            odometerArray = odometerHelper.getSavedOdometerArray(Integer.valueOf(DriverId), dbHelper);\r\n\r\n            if(odometerArray.length() > 0 ){\r\n                SharedPref.SetOdoSavingStatus(true, getApplicationContext());\r\n                postRequest.PostListingData(odometerArray, APIs.SAVE_ODOMETER_OFFLINE, SaveOdometerOffline );\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        String id = \"\";\r\n        if(SharedPref.getDriverType(getApplicationContext()).equals(DriverConst.TeamDriver)) {\r\n            if (SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)) {\r\n                // Current active driver is Main Driver. So we need co driver details and we are getting co driver's details.\r\n                id = DriverConst.GetCoDriverDetails(DriverConst.CoDriverID, getApplicationContext());\r\n            } else {\r\n                // Current active driver is Co Driver. So we need main driver details and we are getting main driver's details.\r\n                id = DriverConst.GetDriverDetails(DriverConst.DriverID, getApplicationContext());\r\n            }\r\n\r\n            if(id.length() > 0) {\r\n                SecondDriver = Integer.valueOf(id);\r\n                try {\r\n                    JSONArray odometerArray = odometerHelper.getSavedOdometerArray(SecondDriver, dbHelper);\r\n                    if (odometerArray.length() > 0) {\r\n                        postRequest.PostListingData(odometerArray, APIs.SAVE_ODOMETER_OFFLINE, Save2ndDriverOdoData);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /*public JSONArray GetDriversSavedArray(){\r\n        int listSize = 0;\r\n        JSONArray DriverJsonArray = new JSONArray();\r\n        List<EldDataModelNew> tempList = new ArrayList<EldDataModelNew>();\r\n\r\n        if(SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)) {   // Main Driver\r\n            try {\r\n                listSize = MainDriverPref.LoadSavedLoc(getApplicationContext()).size();\r\n                tempList = MainDriverPref.LoadSavedLoc(getApplicationContext());\r\n            } catch (Exception e) {\r\n                listSize = 0;\r\n            }\r\n        }else{\r\n            try {   // Co Driver\r\n                listSize = CoDriverPref.LoadSavedLoc(getApplicationContext()).size();\r\n                tempList = CoDriverPref.LoadSavedLoc(getApplicationContext());\r\n            } catch (Exception e) {\r\n                listSize = 0;\r\n            }\r\n        }\r\n\r\n        try {\r\n            if (listSize > 0) {\r\n                for (int i = 0; i < tempList.size(); i++) {\r\n                    EldDataModelNew listModel = tempList.get(i);\r\n                    if(listModel != null) {\r\n                        constants.SaveEldJsonToList(          *//* Put data as JSON to List *//*\r\n                                listModel,\r\n                                DriverJsonArray\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return DriverJsonArray;\r\n        // Log.d(\"Arraay\", \"Arraay: \" + DriverJsonArray.toString());\r\n    }\r\n*/\r\n\r\n\r\n    protected synchronized void buildGoogleApiClient() {\r\n\r\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\r\n                .addConnectionCallbacks(this)\r\n                .addOnConnectionFailedListener(this)\r\n                .addApi(LocationServices.API).build();\r\n\r\n        mGoogleApiClient.connect();\r\n\r\n    }\r\n\r\n\r\n\r\n    void getLocation(boolean isSave){\r\n        if(isSave) {\r\n            if(Globally.LATITUDE.equals(\"0.0\") || Globally.LONGITUDE.equals(\"0.0\")){\r\n                createLocationRequest(MIN_TIME_LOCATION_UPDATES);\r\n            }else {\r\n                SaveLocation(Globally.LATITUDE, Globally.LONGITUDE);\r\n            }\r\n        }else{\r\n            if(Globally.LATITUDE.equals(\"0.0\") || Globally.LONGITUDE.equals(\"0.0\")){\r\n                createLocationRequest(MIN_TIME_LOCATION_UPDATES);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void requestLocationUpdates() {\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &&\r\n                ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }\r\n        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, locationRequest, (LocationListener) this);\r\n    }\r\n\r\n    @Override\r\n    public void onConnected(@Nullable Bundle bundle) {\r\n        //  Log.d(\"onConnected\", \"onConnected\");\r\n        try {\r\n            requestLocationUpdates();\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionSuspended(int i) {\r\n        Log.d(\"onConnectionSuspended\", \"onConnectionSuspended\");\r\n    }\r\n\r\n    @Override\r\n    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {\r\n        Log.d(\"onConnectionFailed\", \"onConnectionFailed\");\r\n    }\r\n\r\n    @Override\r\n    public void onInit(int status) {\r\n        if (status == TextToSpeech.SUCCESS) {\r\n\r\n            int result = tts.setLanguage(Locale.US);\r\n\r\n            if (result == TextToSpeech.LANG_MISSING_DATA\r\n                    || result == TextToSpeech.LANG_NOT_SUPPORTED) {\r\n                Log.e(\"TTS\", \"This Language is not supported\");\r\n            }\r\n\r\n        } else {\r\n            Log.e(\"TTS\", \"Initilization Failed!\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Speak Out Msg\r\n    void SpeakOutMsg(){\r\n        tts.speak(ViolationReason, TextToSpeech.QUEUE_FLUSH, null);\r\n    }\r\n\r\n    // Speak Out Msg\r\n    void SpeakText(String text){\r\n        tts.speak(text, TextToSpeech.QUEUE_FLUSH, null);\r\n    }\r\n\r\n    // saving location with time info to calculate location malfunction event\r\n    void saveEcmLocationWithTime(String latitude, String odo){\r\n\r\n        String odometer = \"0\";\r\n        if(odo.length() > 1){\r\n            odometer = odo;\r\n        }else{\r\n            int ObdStatus = SharedPref.getObdStatus(getApplicationContext());\r\n            if(ObdStatus == Constants.WIRED_CONNECTED ||\r\n                    ObdStatus == Constants.WIFI_CONNECTED ||\r\n                    ObdStatus == Constants.BLE_CONNECTED){\r\n                odometer = SharedPref.getHighPrecisionOdometer(getApplicationContext());\r\n            }\r\n        }\r\n\r\n        if(latitude.length() > 4 ){\r\n            SharedPref.setEcmObdLocationWithTime(Globally.LATITUDE, Globally.LONGITUDE, odometer, global.GetCurrentDateTime(), getApplicationContext());\r\n        }else{\r\n            if(SharedPref.getEcmObdLatitude(getApplicationContext()).length() > 4) {\r\n                SharedPref.setEcmObdLocationWithTime(\"0\", \"0\", odometer, global.GetCurrentDateTime(), getApplicationContext());\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onLocationChanged(Location location) {\r\n         Log.d(\"onLocationChanged\", \"---Latitude: \" + location.getLatitude() + \" -- Longitude: \" + location.getLongitude());\r\n        Globally.LATITUDE = \"\" +location.getLatitude();\r\n        Globally.LONGITUDE = \"\" +location.getLongitude();\r\n        Globally.LONGITUDE = Globally.CheckLongitudeWithCycle(Globally.LONGITUDE);\r\n\r\n       // GpsVehicleSpeed = (int) location.getSpeed() * 18 / 5;\r\n       // GpsVehicleSpeed = 21;\r\n\r\n        int ObdStatus = SharedPref.getObdStatus(getApplicationContext());\r\n        if(ObdStatus == Constants.WIRED_CONNECTED || ObdStatus == Constants.WIFI_CONNECTED || ObdStatus == Constants.BLE_CONNECTED){\r\n            saveEcmLocationWithTime(Globally.LATITUDE, SharedPref.getHighPrecisionOdometer(getApplicationContext()));\r\n        }else{\r\n            saveEcmLocationWithTime(Globally.LATITUDE, SharedPref.getHighPrecisionOdometer(getApplicationContext()));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    CheckConnectivity.ConnectivityInterface ConnectivityInterface = new CheckConnectivity.ConnectivityInterface() {\r\n        @Override\r\n        public void IsConnected(boolean result, int flag) {\r\n            Log.d(\"networkUtil\", \"result: \" +result );\r\n\r\n            if (result) {\r\n                //if(flag == CheckInternetConnection) {\r\n                constants.IsAlsServerResponding = true;\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    //  ------------- WiFI OBD data response handler ----------\r\n    TcpClient.OnMessageReceived obdResponseHandler = new TcpClient.OnMessageReceived() {\r\n        @Override\r\n        public void messageReceived(String message) {\r\n            Log.d(\"response\", \"OBD Response: \" +message);\r\n            obdVehicleSpeed = -1;\r\n\r\n    /*        if(tempVal == 0) {\r\n                message = \"*TS01,861107033607475,165700070720,CAN:UNCONNECTED#\";\r\n                tempVal++;\r\n            }else {\r\n                tempVal = 0;\r\n                message = \"*TS01,861107033607475,164710070720,CAN:UNCONNECTED#\";\r\n            }*/\r\n\r\n            try {\r\n                String rawResponse = message;\r\n                String correctData = \"\";\r\n\r\n                if (!message.equals(noObd) && message.length() > 10) {\r\n\r\n                    SharedPref.setVehicleVin(\"\", getApplicationContext());\r\n\r\n                    if (message.contains(\"CAN\")) {\r\n\r\n                        if (message.contains(\"CAN:UNCONNECTED\")) {\r\n                            SharedPref.SetTruckIgnitionStatusForContinue(\"OFF\", constants.WifiOBD, \"\", getApplicationContext());\r\n                            SharedPref.setVehilceMovingStatus(false, getApplicationContext());\r\n\r\n                            ignitionStatus = \"false\";\r\n                            saveDummyData(rawResponse, constants.WifiOBD);\r\n\r\n                        } else {\r\n\r\n                            double WheelBasedVehicleSpeed = -1;\r\n                            try {\r\n                                String preFix = \"*TS01,861107039609723,050743230120,\";\r\n                                String postFix = \"#\";\r\n\r\n                                if (message.length() > 5) {\r\n                                    String first = message.substring(0, 5);\r\n                                    String last = message.substring(message.length() - 1, message.length());\r\n                                    if (!first.equals(\"*TS01\") && !last.equals(\"#\")) {\r\n                                        message = preFix + message + postFix;\r\n                                    }\r\n                                }\r\n\r\n                                if (message.length() > 500) {\r\n                                    correctData = constants.correctOBDWrongData(message);\r\n                                    message = correctData;\r\n                                }\r\n\r\n                                data = decoder.DecodeTextAndSave(message, new OBDDeviceData());\r\n                                JSONObject canObj = new JSONObject(data.toString());\r\n\r\n\r\n                                GPSSpeed = Integer.valueOf(wifiConfig.checkJsonParameter(canObj, \"GPSSpeed\", \"0\"));\r\n                                WheelBasedVehicleSpeed = Double.parseDouble(wifiConfig.checkJsonParameter(canObj, \"WheelBasedVehicleSpeed\", \"0\"));\r\n\r\n                                if (WheelBasedVehicleSpeed == 0) {\r\n                                    WheelBasedVehicleSpeed = GPSSpeed;\r\n                                }\r\n\r\n\r\n                                truckRPM = wifiConfig.checkJsonParameter(canObj, \"RPMEngineSpeed\", \"0\");\r\n                                ignitionStatus = wifiConfig.checkJsonParameter(canObj, \"EngineRunning\", \"false\");\r\n                                obdTripDistance = wifiConfig.checkJsonParameter(canObj, \"TripDistanceInKM\", \"0\");\r\n                                String latitude = wifiConfig.checkJsonParameter(canObj, \"GPSLatitude\", \"0.0\");\r\n                                String longitude = wifiConfig.checkJsonParameter(canObj, \"GPSLongitude\", \"0.0\");\r\n                                HighResolutionDistance = wifiConfig.checkJsonParameter(canObj, \"HighResolutionTotalVehicleDistanceInKM\", \"-1\");\r\n                                obdOdometer = HighResolutionDistance;\r\n                                obdEngineHours = wifiConfig.checkJsonParameter(canObj, \"EngineHours\", \"0\");\r\n\r\n                                String vin = wifiConfig.checkJsonParameter(canObj, ConstantsKeys.VIN, \"\");\r\n                                SharedPref.setVehicleVin(vin, getApplicationContext());\r\n                                SharedPref.SetObdEngineHours(obdEngineHours, getApplicationContext());\r\n\r\n                                // saving location with time info to calculate location mafunction event\r\n                                saveEcmLocationWithTime(Globally.LATITUDE, HighResolutionDistance);\r\n\r\n                                if (!latitude.equals(\"0\")) {\r\n                                    Globally.LATITUDE = latitude;\r\n                                    Globally.LONGITUDE = Globally.CheckLongitudeWithCycle(longitude);\r\n                                }\r\n\r\n\r\n                                if (ignitionStatus.equals(\"true\")) {    // truckRpmInt > 0\r\n                                    SharedPref.SaveObdStatus(Constants.WIFI_CONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                                    Globally.IS_OBD_IGNITION = true;\r\n                                    continueStatusPromotForPcYm(\"ON\", constants.WifiOBD, global.getCurrentDate(), Constants.WIFI_CONNECTED);\r\n\r\n                                    if (WheelBasedVehicleSpeed > 200) {\r\n                                        WheelBasedVehicleSpeed = 0;\r\n                                    }\r\n\r\n                                    obdVehicleSpeed = (int) WheelBasedVehicleSpeed;\r\n                                    VehicleSpeed = obdVehicleSpeed;\r\n                                    Globally.VEHICLE_SPEED = obdVehicleSpeed;\r\n\r\n                                    saveWifiObdData(\"--\", HighResolutionDistance, ignitionStatus, VehicleSpeed, obdTripDistance, rawResponse, correctData, true);\r\n\r\n\r\n                                } else {\r\n                                    SharedPref.setVehilceMovingStatus(false, getApplicationContext());\r\n                                    SharedPref.SetTruckIgnitionStatusForContinue(\"OFF\", constants.WifiOBD, \"\", getApplicationContext());\r\n                                    Globally.IS_OBD_IGNITION = false;\r\n                                    continueStatusPromotForPcYm(ignitionStatus, constants.WifiOBD, global.getCurrentDate(), Constants.WIFI_DISCONNECTED);\r\n\r\n                                    saveDummyData(rawResponse, constants.WifiOBD);\r\n\r\n                                }\r\n\r\n\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n\r\n                                HighResolutionDistance = \"0\";\r\n                                ignitionStatus = \"--\";\r\n                                obdTripDistance = \"--\";\r\n                                //  tcpClient.sendMessage(\"123456,gps\");\r\n\r\n                            }\r\n\r\n                        }\r\n                        RestartObdFlag = false;\r\n                    } else {\r\n                        if (RestartObdFlag || message.contains(\"RST\")) {\r\n                            Log.d(\"OBD\", ObdRestarted);\r\n                            saveDummyData(ObdRestarted, constants.WifiOBD);\r\n                        } else {\r\n                            ignitionStatus = \"false\";\r\n                            saveDummyData(rawResponse, constants.WifiOBD);\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (RestartObdFlag || message.contains(\"RST\")) {\r\n                        Log.d(\"OBD\", ObdRestarted);\r\n                        saveDummyData(ObdRestarted, constants.WifiOBD);\r\n                    } else {\r\n\r\n                        if (!message.equals(noObd)) {\r\n                            SharedPref.SaveObdStatus(Constants.WIFI_DISCONNECTED, global.getCurrentDate(), getApplicationContext());\r\n                        }\r\n\r\n                        ignitionStatus = \"false\";\r\n                        saveDummyData(rawResponse, constants.WifiOBD);\r\n\r\n                        String lastRestartTime = SharedPref.getOBDRestartTime(getApplicationContext());\r\n                        if (lastRestartTime.length() > 10) {\r\n                            int minDiff = constants.getMinDifference(lastRestartTime, global.getCurrentDate());\r\n                            if (minDiff > 60) {\r\n                                restartObd();\r\n                            }\r\n                        } else {\r\n                            restartObd();\r\n                        }\r\n                    }\r\n                }\r\n            }catch (Exception e){\r\n                ignitionStatus = \"false\";\r\n                e.printStackTrace();\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n    void restartObd(){\r\n        RestartObdFlag = true;\r\n        SharedPref.SetOBDRestartTime( global.getCurrentDate(), getApplicationContext());\r\n        tcpClient.sendMessage(\"123456,rst\");\r\n    }\r\n\r\n    void saveDummyData(String rawResponse, String type){\r\n        HighResolutionDistance = \"0\";  obdTripDistance = \"--\";    RestartObdFlag = false;\r\n        String savedRawData = SharedPref.GetObdRawData(getApplicationContext());\r\n\r\n        if(!savedRawData.equals(rawResponse.trim())) {\r\n            if(rawResponse.contains(\"CAN:UNCONNECTED\") && savedRawData.contains(\"CAN:UNCONNECTED\")){\r\n                // ignore same data to save again\r\n            }else {\r\n\r\n                // save WIfi obd info to sd card\r\n                saveObdData(type, \"--\", obdOdometer, obdOdometer, rawResponse.trim() + \",  \" + \"--\",\r\n                        \"\", \"--\", ignitionStatus, \"--\", \"--\",\r\n                        obdTripDistance, global.GetCurrentDateTime(), \"--\");\r\n\r\n                // Sync wired OBD saved log to server (SAVE sync data service)\r\n                if(rawResponse.contains(\"CAN:UNCONNECTED\") || rawResponse.equals(noObd)){\r\n                    obdUtil.syncObdSingleLog(getApplicationContext(), DriverId, getDriverName(), 10);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(type.equals(constants.ApiData) || type.equals(constants.OfflineData)){\r\n            HighResolutionDistance = SharedPref.GetWifiObdOdometer(getApplicationContext());\r\n\r\n            // Sync wired OBD saved log to server (SAVE sync data service)\r\n            obdUtil.syncObdSingleLog(getApplicationContext(), DriverId, getDriverName(), 10);\r\n\r\n        }\r\n\r\n        SharedPref.SetWifiObdOdometer(HighResolutionDistance, Globally.GetCurrentDateTime(), rawResponse.trim(), getApplicationContext());\r\n\r\n    }\r\n\r\n\r\n    private void saveWifiObdData(String vin, String HighPrecisionOdometer, String ignition, int speed, String tripDistance,\r\n                                 String rawResponse, String correctedData,  boolean isSave){\r\n\r\n        int DrivingSpeedLimit   = DriverConst.getDriverConfiguredTime(DriverConst.DrivingSpeed, getApplicationContext());\r\n        double speedCalculated = -1;\r\n        String savedTime = SharedPref.GetWifiObdSavedTime(getApplicationContext());\r\n        String currentLogDate = global.GetCurrentDateTime();\r\n\r\n        if(rawResponse.contains(\"CAN\")) {\r\n            speedCalculated = calculateSpeedFromWifiObdOdometer(\r\n                    savedTime,\r\n                    SharedPref.GetWifiObdOdometer(getApplicationContext()),\r\n                    HighPrecisionOdometer);\r\n        }\r\n\r\n        if(speedCalculated >= 8 || speed >= 8){\r\n            SharedPref.setVehilceMovingStatus(true, getApplicationContext());\r\n        }else{\r\n            SharedPref.setVehilceMovingStatus(false, getApplicationContext());\r\n        }\r\n\r\n\r\n        SharedPref.SetWifiObdOdometer(HighResolutionDistance, currentLogDate, rawResponse, getApplicationContext());\r\n\r\n        if(isSave) {\r\n            // save WIfi obd info to sd card\r\n            saveObdData(constants.WifiOBD, vin, obdOdometer, HighPrecisionOdometer, rawResponse.trim() + \",  \"+speedCalculated,\r\n                    correctedData, ignition, truckRPM, String.valueOf(speed), String.valueOf((int)speedCalculated),\r\n                    tripDistance, currentLogDate, savedTime);\r\n\r\n            // save current odometer for HOS calculation\r\n            double dayStartOdometer = Double.parseDouble(HighPrecisionOdometer) * 1000;\r\n            saveDayStartOdometer(\"\"+dayStartOdometer);\r\n\r\n        }\r\n\r\n        String jobType = SharedPref.getDriverStatusId(getApplicationContext());\r\n        String savedDate = SharedPref.getHighPrecesionSavedTime(getApplicationContext());\r\n\r\n        if(savedDate.length() == 0) {\r\n            // save current HighPrecisionOdometer locally\r\n            savedDate = currentLogDate;\r\n            SharedPref.saveHighPrecisionOdometer(HighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n        }\r\n\r\n\r\n\r\n        double truckRpm = 0;\r\n\r\n        try{\r\n            truckRpm = Double.parseDouble(truckRPM);\r\n        }catch (Exception e){}\r\n      // Log.d(\"timeInSec\", \"timeInSec: \"+timeInSec);\r\n\r\n        if( ( truckRpm > 600 && timeInSec >= 5 ) ) {    //|| rawResponse.contains(\"GPS\")\r\n\r\n            if (jobType.equals(global.DRIVING)) {\r\n\r\n                if (speed >= DrivingSpeedLimit || speedCalculated >= DrivingSpeedLimit ) {\r\n\r\n                    if(speed == 0){\r\n                        obdVehicleSpeed      = (int)speedCalculated;\r\n                        VehicleSpeed         = obdVehicleSpeed;\r\n                        Globally.VEHICLE_SPEED =  obdVehicleSpeed;\r\n                    }\r\n\r\n                    ServiceCycle.ContinueSpeedCounter = 0;\r\n                    if (constants.minDiff(savedDate, global, getApplicationContext()) > 1) {  //&& !HighPrecisionOdometer.equals(SharedPref.getHighPrecisionOdometer(getApplicationContext()))\r\n                        SharedPref.saveHighPrecisionOdometer(HighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n                        serviceCycle.CalculateCycleTime(Integer.valueOf(DriverId), IsLogApiACalled, IsAlertTimeValid, VehicleSpeed,\r\n                                hMethods, dbHelper, latLongHelper, LocMethod, serviceCallBack, serviceError, notificationMethod, shipmentHelper,\r\n                                odometerhMethod, true, constants.WIFI_OBD, obdVehicleSpeed, GpsVehicleSpeed);\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if (constants.minDiff(savedDate, global, getApplicationContext()) > 0) {\r\n                        SharedPref.saveHighPrecisionOdometer(HighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n                        serviceCycle.CalculateCycleTime(Integer.valueOf(DriverId), IsLogApiACalled, IsAlertTimeValid, VehicleSpeed,\r\n                                hMethods, dbHelper, latLongHelper, LocMethod, serviceCallBack, serviceError, notificationMethod, shipmentHelper,\r\n                                odometerhMethod, true, constants.WIFI_OBD, obdVehicleSpeed, GpsVehicleSpeed);\r\n                    }\r\n                }\r\n\r\n            } else if (jobType.equals(global.ON_DUTY)) {\r\n\r\n                if (speed >= DrivingSpeedLimit || speedCalculated >= DrivingSpeedLimit ) {\r\n                    if(speed == 0){\r\n                        obdVehicleSpeed      = (int)speedCalculated;\r\n                        VehicleSpeed         = obdVehicleSpeed;\r\n                        Globally.VEHICLE_SPEED =  obdVehicleSpeed;\r\n                    }\r\n\r\n                    SharedPref.saveHighPrecisionOdometer(HighPrecisionOdometer,currentLogDate, getApplicationContext());\r\n                    serviceCycle.CalculateCycleTime(Integer.valueOf(DriverId), IsLogApiACalled, IsAlertTimeValid, VehicleSpeed,\r\n                            hMethods, dbHelper, latLongHelper, LocMethod, serviceCallBack, serviceError, notificationMethod, shipmentHelper,\r\n                            odometerhMethod, true, constants.WIFI_OBD, obdVehicleSpeed, GpsVehicleSpeed);\r\n\r\n                } else {\r\n\r\n                    ServiceCycle.ContinueSpeedCounter = 0;\r\n                    if (constants.minDiff(savedDate, global, getApplicationContext()) > 1) {\r\n                        SharedPref.saveHighPrecisionOdometer(HighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n                        serviceCycle.CalculateCycleTime(Integer.valueOf(DriverId), IsLogApiACalled, IsAlertTimeValid, VehicleSpeed,\r\n                                hMethods, dbHelper, latLongHelper, LocMethod, serviceCallBack, serviceError, notificationMethod, shipmentHelper,\r\n                                odometerhMethod, true, constants.WIFI_OBD, obdVehicleSpeed, GpsVehicleSpeed);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                SharedPref.saveHighPrecisionOdometer(HighPrecisionOdometer, currentLogDate, getApplicationContext());\r\n\r\n                if (speedCalculated >= DrivingSpeedLimit && speed == 0 ) {\r\n                    obdVehicleSpeed = (int) speedCalculated;\r\n                    VehicleSpeed = obdVehicleSpeed;\r\n                    Globally.VEHICLE_SPEED = obdVehicleSpeed;\r\n                    speed = obdVehicleSpeed;\r\n                }\r\n\r\n\r\n                if (speed < DrivingSpeedLimit || (speedCalculated < DrivingSpeedLimit )) {\r\n                    Log.d(\"ELD Rule\", \"Rule is correct.\");\r\n                    ServiceCycle.ContinueSpeedCounter = 0;\r\n                } else {\r\n                    serviceCycle.CalculateCycleTime(Integer.valueOf(DriverId), IsLogApiACalled, IsAlertTimeValid, VehicleSpeed,\r\n                            hMethods, dbHelper, latLongHelper, LocMethod, serviceCallBack, serviceError, notificationMethod, shipmentHelper,\r\n                            odometerhMethod, true, constants.WIFI_OBD, obdVehicleSpeed, GpsVehicleSpeed);\r\n                }\r\n\r\n            }\r\n        }else{\r\n            if(timeInSec >= 5) {\r\n                ServiceCycle.ContinueSpeedCounter = 0;\r\n            }\r\n        }\r\n\r\n        SharedPref.setVss(VehicleSpeed, getApplicationContext());\r\n        SharedPref.setRPM(truckRPM, getApplicationContext());\r\n\r\n        //    global.ShowLocalNotification(getApplicationContext(), \"wifi OBD speed: \", \"Wifi obd Speed: \" + speed, 2003);\r\n\r\n        resetDataAfterCycleCall(true);\r\n    }\r\n\r\n\r\n    private class UploadLocFile extends AsyncTask<String, String, String> {\r\n\r\n        String strResponse = \"\";\r\n        Response response;\r\n\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n\r\n            try {\r\n\r\n                com.squareup.okhttp.Request request = null;\r\n\r\n                /* ===================  CROSS CHECK ONCE FOR LOAD_ID AND JOB_ID ================== */\r\n                MultipartBuilder builderNew = new MultipartBuilder().type(MultipartBuilder.FORM);\r\n                // .addFormDataPart(ConstantsKeys.DriverId, DriverId ) ;\r\n\r\n                if (locDataFile != null && locDataFile.exists()) {\r\n                    Log.i(\"\", \"---Add File: \" + locDataFile.toString());\r\n                    builderNew.addFormDataPart(\"myFile\", \"file\",\r\n                            RequestBody.create(MediaType.parse(\"application/txt\"), new File(locDataFile.toString())));\r\n                }\r\n\r\n                RequestBody requestBody = builderNew.build();\r\n                request = new com.squareup.okhttp.Request.Builder()\r\n                        .url(APIs.SAVE_LAT_LONG)\r\n                        .post(requestBody)\r\n                        .build();\r\n\r\n\r\n                OkHttpClient client = new OkHttpClient();\r\n                client.setProtocols(Arrays.asList(Protocol.HTTP_1_1));\r\n                client.setConnectTimeout(30, TimeUnit.SECONDS); // connect timeout\r\n                client.setReadTimeout(30, TimeUnit.SECONDS);\r\n                response = client.newCall(request).execute();\r\n                strResponse = response.body().string();\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            return strResponse;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String result) {\r\n            Log.e(\"String Response\", \">>>>Location Response   \" + result);\r\n\r\n            try {\r\n\r\n                if(locDataFile.exists())\r\n                    locDataFile.delete();\r\n\r\n                JSONObject obj = new JSONObject(result);\r\n                String status = obj.getString(\"Status\");\r\n\r\n                if(status.equalsIgnoreCase(\"true\")) {\r\n                    LocMethod.DriverLocationHelper(Integer.valueOf(DriverId), dbHelper, new JSONArray());\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    void SaveLocation(String lat, String lon){\r\n\r\n        try {\r\n            if (lat.length() > 3 && lon.length() > 3) { // minimum format required 00.\r\n\r\n                try {\r\n                    String UTCDate = global.GetCurrentUTCTime();\r\n                    // Saved json in location array\r\n                    JSONObject newObj = LocMethod.LocationObject(DriverId, lat, lon, VIN_NUMBER, VehicleId , UTCDate, GpsVehicleSpeed );\r\n                    JSONArray savedLocArray = LocMethod.getSavedLocationArray(Integer.valueOf(DriverId), dbHelper);\r\n\r\n                    savedLocArray.put(newObj);\r\n\r\n                    if(savedLocArray.length() > 1) {\r\n\r\n                        try {\r\n                            JSONObject originJson = (JSONObject) savedLocArray.get(savedLocArray.length() - 2);\r\n                            String lastItemLat = originJson.getString(\"Latitude\");\r\n                            String lastItemLon = originJson.getString(\"Longitude\");\r\n\r\n                            if(!lat.equals(lastItemLat) || !lon.equals(lastItemLon)){   // speed > 1   because data accuracy difference is 10-20 meters. So speed value may be increased.\r\n                                LocMethod.DriverLocationHelper(Integer.valueOf(DriverId), dbHelper, savedLocArray);\r\n                            }else{\r\n                                if(sameLocationCount > 1) {\r\n                                    StopLocationUpdates();\r\n\r\n                                    if (global.checkPlayServices(getApplicationContext())) {\r\n                                        // Building the GoogleApi client\r\n                                        buildGoogleApiClient();\r\n                                    }\r\n                                    createLocationRequest(MIN_TIME_LOCATION_UPDATES);\r\n                                    sameLocationCount = 0;\r\n                                }\r\n                                sameLocationCount++;\r\n                            }\r\n                        }catch (Exception e){\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n                    }else{\r\n                        LocMethod.DriverLocationHelper(Integer.valueOf(DriverId), dbHelper, savedLocArray);\r\n                    }\r\n\r\n                    if (global.isConnected(getApplicationContext()) && savedLocArray.length() >= 20) {\r\n                        locDataFile = global.SaveFileInSDCard(\"Loc_\", savedLocArray.toString(), false, getApplicationContext());\r\n                        //  Log.d(\"savedLocArray\", \"--savedLocArray: \" + savedLocArray);\r\n                        new UploadLocFile().execute();\r\n\r\n                    }\r\n\r\n                    if(savedLocArray.length() > 5){\r\n                        constants.IS_ELD_ON_CREATE = false;\r\n                    }\r\n\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                JSONArray latLongArray  = latLongHelper.getSavedLatLonArray(dbHelper);\r\n                JSONObject obj = latLongHelper.getLatLonJson(latitude, longitude);\r\n                latLongArray.put(obj);\r\n                latLongHelper.LatLongHelper(dbHelper, latLongArray);\r\n\r\n\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    void SaveDriverRecordLogUpdates(){\r\n        try {\r\n            if (DriverId.length() > 0) {\r\n                JSONArray recordsLogArray = logRecordMethod.getSavedLogRecordArray(Integer.valueOf(DriverId), dbHelper);\r\n                if (recordsLogArray.length() > 0) {\r\n                    SAVE_DRIVER_RECORD_LOG(recordsLogArray, false, false, Constants.SocketTimeout30Sec);\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    void SaveCertifyLog(){\r\n        try{\r\n            if(DriverId.length() > 0) {\r\n                JSONArray certifyLogArray = certifyLogMethod.getSavedCertifyLogArray(Integer.valueOf(DriverId), dbHelper);\r\n                if (certifyLogArray.length() > 0) {\r\n                    saveDriverLogPost.PostDriverLogData(certifyLogArray, APIs.CERTIFY_LOG_OFFLINE, Constants.SocketTimeout30Sec, false, false, 1, SaveCertifyLog);\r\n\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    void SaveMalfnDiagnstcLogToServer(JSONArray malArray1){\r\n        try{\r\n            if(DriverId.length() > 0) {\r\n                if(malArray1 == null) {\r\n                    malArray1 = malfunctionDiagnosticMethod.getSavedMalDiagstcArray(Integer.valueOf(DriverId), dbHelper);\r\n                }\r\n                if (global.isConnected(getApplicationContext()) && malArray1.length() > 0 && isMalfncDataAlreadyPosting == false) {\r\n                    isMalfncDataAlreadyPosting = true;\r\n                    saveDriverLogPost.PostDriverLogData(malArray1, APIs.MALFUNCTION_DIAGNOSTIC_EVENT, Constants.SocketTimeout30Sec, false, false, 1, SaveMalDiagnstcEvent);\r\n                }\r\n            }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //*================== Get Odometer 18 Days data ===================*//*\r\n    void SaveDriverDeviceUsageLog(final String savedDate){\r\n        networkUsage();\r\n\r\n        params = new HashMap<String, String>();\r\n        params.put(ConstantsKeys.DriverId, DriverId);\r\n        params.put(ConstantsKeys.AlsSendingData, AlsSendingData );\r\n        params.put(ConstantsKeys.AlsReceivedData, AlsReceivedData   );\r\n        params.put(ConstantsKeys.MobileUsage, MobileUsage );\r\n        params.put(ConstantsKeys.TitalUsage, TotalUsage );\r\n        params.put(ConstantsKeys.EntryDate, savedDate );\r\n\r\n        saveDriverDeviceUsageLog.executeRequest(Request.Method.POST, APIs.SAVE_DRIVER_DEVICE_USAGE_LOG , params, SaveDriverDeviceUsageLog,\r\n                Constants.SocketTimeout20Sec, ResponseCallBack, ErrorCallBack);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    //*================== Get Odometer 18 Days data ===================*//*\r\n    void GetOdometer18Days(final String DriverId, final String DeviceId, final String CompanyId , final String CreatedDate){\r\n\r\n        params = new HashMap<String, String>();\r\n        params.put(ConstantsKeys.DriverId, DriverId);\r\n        params.put(ConstantsKeys.DeviceId, DeviceId );\r\n        params.put(ConstantsKeys.CompanyId, CompanyId  );\r\n        params.put(ConstantsKeys.CreatedDate, CreatedDate);\r\n\r\n        GetOdometerRequest.executeRequest(Request.Method.POST, APIs.GET_ODOMETER_OFFLINE , params, GetOdometers18Days,\r\n                Constants.SocketTimeout20Sec, ResponseCallBack, ErrorCallBack);\r\n\r\n\r\n    }\r\n\r\n\r\n    //*================== Get Driver Status Permissions ===================*//*\r\n    void GetCtPatInspection18Days(final String DriverId, final String DeviceId, final String SearchedDate, final int GetInspectionFlag ){\r\n\r\n        params = new HashMap<String, String>();\r\n        params.put(ConstantsKeys.DriverId, DriverId);\r\n        params.put(ConstantsKeys.DeviceId, DeviceId );\r\n        params.put(ConstantsKeys.SearchedDate, SearchedDate );\r\n\r\n        ctPatInsp18DaysRequest.executeRequest(Request.Method.POST, APIs.GET_OFFLINE_17_INSPECTION_LIST, params, GetInspectionFlag,\r\n                Constants.SocketTimeout10Sec, ResponseCallBack, ErrorCallBack);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void continueStatusPromotForPcYm(String obdCurrentIgnition, String type, String time, int obdStatus){\r\n\r\n        try {\r\n\r\n            //   if( obdStatus == Constants.WIFI_CONNECTED && obdStatus == Constants.WIRED_CONNECTED ) {\r\n            if( obdStatus != Constants.NO_CONNECTION && SharedPref.GetNewLoginStatus(getApplicationContext()) == false) {\r\n                try {\r\n                    if (UILApplication.isActivityVisible()) {\r\n                        if (EldFragment.driverLogArray == null || EldFragment.driverLogArray.length() == 0) {\r\n                            EldFragment.driverLogArray = hMethods.getSavedLogArray(Integer.valueOf(DriverId), dbHelper);\r\n                        }\r\n                        if (EldFragment.driverLogArray.length() > 0) {  //UILApplication.isActivityVisible() &&\r\n                            JSONObject lastJsonItem =  hMethods.GetLastJsonFromArray(EldFragment.driverLogArray);\r\n                            int currentJobStatus = lastJsonItem.getInt(ConstantsKeys.DriverStatusId);\r\n                            boolean isYard = lastJsonItem.getBoolean(ConstantsKeys.YardMove);\r\n                            boolean isPersonal = lastJsonItem.getBoolean(ConstantsKeys.Personal);\r\n\r\n                            if ((currentJobStatus == constants.OFF_DUTY && isPersonal) || (currentJobStatus == constants.ON_DUTY && isYard)) {\r\n                                String lastIgnitionStatus = SharedPref.GetTruckIgnitionStatusForContinue(constants.TruckIgnitionStatus, getApplicationContext());\r\n                                if (lastIgnitionStatus.equals(\"OFF\") && obdCurrentIgnition.equals(\"ON\")) {\r\n                                    SharedPref.SetTruckStartLoginStatus(true, getApplicationContext());\r\n\r\n                                    Intent intent = new Intent(ConstantsKeys.IsIgnitionOn);\r\n                                    intent.putExtra(ConstantsKeys.IsIgnitionOn, true);\r\n                                    LocalBroadcastManager.getInstance(BackgroundLocationService.this).sendBroadcast(intent);\r\n\r\n                                }\r\n\r\n                                SharedPref.SetTruckIgnitionStatusForContinue(obdCurrentIgnition, type, time, getApplicationContext());\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                //\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private void checkDeferralData(){\r\n        try{\r\n            if (SharedPref.getDriverType(getApplicationContext()).equals(DriverConst.TeamDriver)) {\r\n\r\n                // -----------------------------UnPosted inspection -----------------------------------\r\n                defMainDriverArray = deferralMethod.getSavedDeferralArray(Integer.valueOf(DriverId), dbHelper);\r\n                defCoDriverArray = deferralMethod.getSavedDeferralArray(Integer.valueOf(CoDriverId), dbHelper);\r\n\r\n                if (defMainDriverArray.length() > 0) {\r\n                    saveDriverLogPost.PostDriverLogData(defMainDriverArray, APIs.SAVE_DEFFERAL_EVENT, Constants.SocketTimeout10Sec, true, false,\r\n                            Integer.valueOf(DriverId), SaveDeferralMain);\r\n                }\r\n\r\n\r\n                if (defCoDriverArray.length() > 0) {\r\n                    saveDriverLogPost.PostDriverLogData(defCoDriverArray, APIs.SAVE_DEFFERAL_EVENT, Constants.SocketTimeout10Sec, true, false,\r\n                            Integer.valueOf(CoDriverId), SaveDeferralCo);\r\n                }\r\n\r\n            }else{\r\n                defMainDriverArray = deferralMethod.getSavedDeferralArray(Integer.valueOf(DriverId), dbHelper);\r\n                if(defMainDriverArray.length() > 0){\r\n                    saveDriverLogPost.PostDriverLogData(defMainDriverArray, APIs.SAVE_DEFFERAL_EVENT, Constants.SocketTimeout10Sec, true, false,\r\n                            Integer.valueOf(DriverId), SaveDeferralMain);\r\n                }\r\n            }\r\n\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private void SyncData(boolean IsAutoSync){\r\n\r\n        try {\r\n\r\n            savedSyncedArray = syncingMethod.getSavedSyncingArray(Integer.valueOf(DriverId), dbHelper);\r\n\r\n            if(savedSyncedArray.length() > 0) {\r\n                syncingFile = global.SaveFileInSDCard(\"Sync_\", savedSyncedArray.toString(), false, getApplicationContext());\r\n            }\r\n\r\n            ViolationFile = global.GetSavedFile(getApplicationContext(),ConstantsKeys.ViolationTest, \"txt\");\r\n\r\n            if(IsAutoSync){\r\n                if(ViolationFile.exists() && syncingFile.exists() ) {\r\n                    // Sync driver log API data to server with SAVE_LOG_TEXT_FILE (SAVE sync data service)\r\n                    SyncDataUpload syncDataUpload = new SyncDataUpload(getApplicationContext(), DriverId, syncingFile, ViolationFile, new File(\"\"), true, asyncResponse);\r\n                    syncDataUpload.execute();\r\n                }\r\n            }else{\r\n                // when AutoSync disabled only check violation file and post it on server\r\n                if(ViolationFile.exists() ) {\r\n                    syncingFile = null;\r\n                    SyncDataUpload syncDataUpload = new SyncDataUpload(getApplicationContext(), DriverId, syncingFile, ViolationFile, new File(\"\"), true, asyncResponse);\r\n                    syncDataUpload.execute();\r\n                }\r\n            }\r\n\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    VolleyRequest.VolleyCallback ResponseCallBack = new VolleyRequest.VolleyCallback(){\r\n\r\n        @Override\r\n        public void getResponse(String response, int flag) {\r\n            //  Log.d(\"response\", \"Service response-\" + flag + \": \" + response);\r\n\r\n            JSONObject obj = null;\r\n            String status = \"\", message = \"\";\r\n\r\n            try{\r\n                obj = new JSONObject(response);\r\n                status = obj.getString(\"Status\");\r\n                message = obj.getString(\"Message\");\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n\r\n            if(status.equalsIgnoreCase(\"true\")) {\r\n                switch (flag) {\r\n\r\n                    case SaveMalDiagnstcEvent:\r\n                        Log.d(\"SaveMalDiagnstcEvent\", \"SaveMalDiagnstcEvent saved successfully\");\r\n                        isMalfncDataAlreadyPosting = false;\r\n                        // clear malfunction array\r\n                        malfunctionDiagnosticMethod.MalfnDiagnstcLogHelper(Integer.parseInt(DriverId), dbHelper, new JSONArray());\r\n                        break;\r\n\r\n\r\n                    case UpdateOffLineStatus:\r\n\r\n\r\n                        //   Log.d(\"response\", \"UpdateOffLine: \" + flag + \": \" + response);\r\n                        try {\r\n\r\n                            boolean IsAutoSync = false;\r\n                            updateOfflineNoResponseCount = 0;\r\n                            updateOfflineApiRejectionCount = 0;\r\n                            constants.IsAlsServerResponding = true;\r\n\r\n                            apiReturnedSpeed = \"--\";\r\n\r\n                            if (status.equalsIgnoreCase(\"false\")) {\r\n\r\n                                if (message.equalsIgnoreCase(\"Device Logout\")) {\r\n                                    DeviceLogout(message);\r\n                                } else {\r\n\r\n                                   // VehicleSpeed = GpsVehicleSpeed;\r\n\r\n                                }\r\n                            } else {\r\n\r\n                                // -------- Save date time Locally -------------\r\n                                try {\r\n                                    JSONObject dataObj = new JSONObject(obj.getString(\"Data\"));\r\n                                    String UtcCurrentDate = dataObj.getString(\"UTCDateTime\");\r\n                                    String OBDUTCDate = dataObj.getString(\"OBDUTCDateTime\");\r\n                                    String CarrierName = dataObj.getString(\"CarrierName\");\r\n                                    DateTime utcCurrentDateTime = global.getDateTimeObj(UtcCurrentDate, false);\r\n                                    DateTime ObdUtcDateTime = global.getDateTimeObj(OBDUTCDate, false);\r\n\r\n\r\n                                    boolean IsAOBRD = dataObj.getBoolean(\"IsAOBRD\");\r\n\r\n                                    if (dataObj.has(\"IsOBDPingAllowed\")) {\r\n                                        IsOBDPingAllowed = dataObj.getBoolean(\"IsOBDPingAllowed\");\r\n                                        SharedPref.SetOBDPingAllowedStatus(IsOBDPingAllowed, getApplicationContext());\r\n                                    }\r\n\r\n                                    if (dataObj.has(\"IsAutoSync\")) {\r\n                                        IsAutoSync = dataObj.getBoolean(\"IsAutoSync\");\r\n                                    }\r\n\r\n                                    if (dataObj.has(\"IsAutoOnDutyDriveEnabled\")) {\r\n                                        boolean IsAutoDrive = dataObj.getBoolean(\"IsAutoOnDutyDriveEnabled\");\r\n                                        SharedPref.SetAutoDriveStatus(IsAutoDrive, getApplicationContext());\r\n                                    }\r\n\r\n                                    try {\r\n                                        // Save Truck information for manual/auto mode\r\n                                        SharedPref.SetIsAOBRD(IsAOBRD, getApplicationContext());\r\n                                        SharedPref.SetAOBRDAutomatic(dataObj.getBoolean(ConstantsKeys.IsAOBRDAutomatic), getApplicationContext());\r\n                                        SharedPref.SetAOBRDAutoDrive(dataObj.getBoolean(ConstantsKeys.IsAutoDriving), getApplicationContext());\r\n                                        SharedPref.SetDrivingShippingAllowed(dataObj.getBoolean(ConstantsKeys.IsDrivingShippingAllowed), getApplicationContext());\r\n                                        SharedPref.saveTimeStampView(dataObj.getBoolean(ConstantsKeys.IsTimestampEnabled), getApplicationContext());\r\n                                        SharedPref.setCurrentUTCTime(UtcCurrentDate, getApplicationContext());\r\n\r\n                                        boolean isPU75Crossed = dataObj.getBoolean(ConstantsKeys.PersonalUse75Km);\r\n                                        boolean wasPU75Crossed = SharedPref.isPersonalUse75KmCrossed(getApplicationContext());\r\n                                       // isPU75Crossed = true; //------------------\r\n\r\n                                        SharedPref.setPersonalUse75Km(isPU75Crossed, getApplicationContext());\r\n\r\n                                        if(isPU75Crossed && wasPU75Crossed == false){\r\n                                            try {\r\n                                                if (EldFragment.driverLogArray == null || EldFragment.driverLogArray.length() == 0) {\r\n                                                    EldFragment.driverLogArray = hMethods.getSavedLogArray(Integer.valueOf(DriverId), dbHelper);\r\n                                                }\r\n                                                boolean isPersonal = true;\r\n                                                if (EldFragment.driverLogArray.length() > 0) {\r\n                                                    JSONObject lastJsonItem = hMethods.GetLastJsonFromArray(EldFragment.driverLogArray);\r\n                                                    //  int currentJobStatus = lastJsonItem.getInt(ConstantsKeys.DriverStatusId);\r\n                                                    isPersonal = lastJsonItem.getBoolean(ConstantsKeys.Personal);\r\n                                                }\r\n                                                String driverStatusId = SharedPref.getDriverStatusId(getApplicationContext());\r\n\r\n                                                if (driverStatusId.equals(Globally.OFF_DUTY) && isPersonal) {\r\n                                                    String certifyTitle = \"Personal Use Alert\";\r\n                                                    String titleDesc = \"Personal Use limit has been exceeded above 75 km for the day. Please change your status.\";\r\n                                                    global.PlayNotificationSound(getApplicationContext());\r\n\r\n                                                    if (UILApplication.isActivityVisible()) {\r\n                                                        Intent intent = new Intent(ConstantsKeys.SuggestedEdit);\r\n                                                        intent.putExtra(ConstantsKeys.PersonalUse75Km, true);\r\n                                                        intent.putExtra(ConstantsKeys.Title, certifyTitle + \" !!\");\r\n                                                        intent.putExtra(ConstantsKeys.Desc, titleDesc);\r\n                                                        intent.putExtra(ConstantsKeys.OBDSpeed, obdVehicleSpeed);\r\n                                                        LocalBroadcastManager.getInstance(BackgroundLocationService.this).sendBroadcast(intent);\r\n\r\n                                                    } else {\r\n                                                        global.ShowLocalNotification(getApplicationContext(), certifyTitle,\r\n                                                                titleDesc, 2008);\r\n                                                    }\r\n                                                    String blank = \"\";\r\n\r\n                                                    saveLogWithRuleCall(blank, blank, obdVehicleSpeed, blank,\r\n                                                            0, blank, blank, \"not_saved\", obdVehicleSpeed);\r\n\r\n                                                }\r\n                                            }catch (Exception e){\r\n                                                e.printStackTrace();\r\n                                            }\r\n                                        }\r\n\r\n\r\n\r\n                                        boolean isSuggestedEdit = dataObj.getBoolean(ConstantsKeys.SuggestedEdit);\r\n                                        boolean isSuggestedRecall;\r\n                                        boolean IsCycleRequest      =  dataObj.getBoolean(ConstantsKeys.IsCycleRequest);\r\n                                        boolean IsELDNotification = false;\r\n                                        String ELDNotification    = dataObj.getString(\"DriverELDNotificationList\");\r\n\r\n                                        try{\r\n                                            JSONArray eldNotArray = new JSONArray(ELDNotification);\r\n                                            if(eldNotArray.length() > 0){\r\n                                                IsELDNotification = true;\r\n                                            }\r\n                                        }catch (Exception e){\r\n                                            e.printStackTrace();\r\n                                        }\r\n\r\n                                        SharedPref.SetELDNotification(IsELDNotification, getApplicationContext());\r\n                                        SharedPref.SetNorthCanadaStatus(dataObj.getBoolean(ConstantsKeys.IsNorthCanada), getApplicationContext());\r\n\r\n                                        if(DriverType == Constants.MAIN_DRIVER_TYPE) {\r\n                                            SharedPref.setEldOccurences(dataObj.getBoolean(ConstantsKeys.IsUnidentified),\r\n                                                    dataObj.getBoolean(ConstantsKeys.IsMalfunction),\r\n                                                    dataObj.getBoolean(ConstantsKeys.IsDiagnostic),\r\n                                                    isSuggestedEdit, getApplicationContext());\r\n\r\n                                            isSuggestedRecall = SharedPref.isSuggestedRecall(getApplicationContext());\r\n\r\n                                            SharedPref.SetExemptDriverStatusMain(dataObj.getBoolean(ConstantsKeys.IsExemptDriver), getApplicationContext());\r\n                                            SharedPref.SetCycleRequestStatusMain(IsCycleRequest, getApplicationContext());\r\n\r\n\r\n                                        }else{\r\n                                            SharedPref.setEldOccurencesCo(dataObj.getBoolean(ConstantsKeys.IsUnidentified),\r\n                                                    dataObj.getBoolean(ConstantsKeys.IsMalfunction),\r\n                                                    dataObj.getBoolean(ConstantsKeys.IsDiagnostic),\r\n                                                    isSuggestedEdit, getApplicationContext());\r\n\r\n                                            isSuggestedRecall = SharedPref.isSuggestedRecallCo(getApplicationContext());\r\n\r\n                                            SharedPref.SetExemptDriverStatusCo(dataObj.getBoolean(ConstantsKeys.IsExemptDriver), getApplicationContext());\r\n                                            SharedPref.SetCycleRequestStatusCo(IsCycleRequest, getApplicationContext());\r\n\r\n                                        }\r\n\r\n\r\n                                        if ( (isSuggestedEdit && isSuggestedRecall) || IsCycleRequest || IsELDNotification) {\r\n                                            try {\r\n                                                if(UILApplication.isActivityVisible()) {\r\n                                                    Intent intent = new Intent(ConstantsKeys.SuggestedEdit);\r\n                                                    intent.putExtra(ConstantsKeys.SuggestedEdit, isSuggestedEdit);\r\n                                                    intent.putExtra(ConstantsKeys.IsCycleRequest, IsCycleRequest);\r\n                                                    intent.putExtra(ConstantsKeys.IsELDNotification, IsELDNotification);\r\n                                                    intent.putExtra(ConstantsKeys.DriverELDNotificationList, ELDNotification);\r\n                                                    LocalBroadcastManager.getInstance(BackgroundLocationService.this).sendBroadcast(intent);\r\n                                                }\r\n                                            } catch (Exception e) {\r\n                                                e.printStackTrace();\r\n                                            }\r\n                                        }\r\n\r\n\r\n                                    }catch (Exception e){\r\n                                        e.printStackTrace();\r\n                                    }\r\n\r\n                                    SharedPref.setOnlineStatus(true, getApplicationContext());\r\n\r\n                                    // Sync app usage log to server (SAVE sync data service)\r\n                                    obdUtil.syncAppUsageLog(getApplicationContext(), DriverId);\r\n\r\n\r\n\r\n                                    if (SharedPref.getDriverType(getApplicationContext()).equals(DriverConst.TeamDriver)) {\r\n                                        if (SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)) {\r\n                                            // Current active driver is Main Driver.\r\n                                            DriverConst.UpdateDriverCarrierName(CarrierName, getApplicationContext());\r\n                                        } else {\r\n                                            // Current active driver is Co Driver.\r\n                                            DriverConst.UpdateCoDriverCarrierName(CarrierName, getApplicationContext());\r\n                                        }\r\n                                    } else {\r\n                                        DriverConst.UpdateDriverCarrierName(CarrierName, getApplicationContext());\r\n                                    }\r\n\r\n                                    if (dataObj.has(\"IsOdometerFromOBD\"))\r\n                                        SharedPref.SetOdometerFromOBD(dataObj.getBoolean(\"IsOdometerFromOBD\"), getApplicationContext());\r\n\r\n                                    int CycleId = dataObj.getInt(\"CycleId\");\r\n                                    int VehicleSpeedInterval = dataObj.getInt(\"VehicleSpeedInterval\");\r\n                                    int MinDiff = utcCurrentDateTime.getMinuteOfDay() - ObdUtcDateTime.getMinuteOfDay();\r\n\r\n                                    if (MinDiff > VehicleSpeedInterval) { //&& MinDiff <= VehicleSpeedInterval\r\n                                        IsAlertTimeValid = true;\r\n                                    } else {\r\n                                        IsAlertTimeValid = false;\r\n                                    }\r\n\r\n                                    obdVehicleSpeed = dataObj.getInt(\"VehicleSpeed\");\r\n                                    apiReturnedSpeed = dataObj.getString(\"VehicleSpeed\");\r\n\r\n                                    Globally.VEHICLE_SPEED = obdVehicleSpeed;\r\n\r\n                                    if (obdVehicleSpeed != -1) {\r\n                                        VehicleSpeed = obdVehicleSpeed;\r\n                                    }\r\n\r\n                                    //    global.ShowLocalNotification(getApplicationContext(), \"API obd Speed\", \"API obd Speed: \" + obdVehicleSpeed, 2009);\r\n\r\n                                    // Save Driver Cycle With Current Date\r\n                                    constants.SaveCycleWithCurrentDate(CycleId, utcCurrentDateTime.toString(), \"UpdateOfflineDriverLog_api\",\r\n                                            global, getApplicationContext());\r\n                                } catch (Exception e) {\r\n                                   // VehicleSpeed = GpsVehicleSpeed;\r\n                                    Globally.VEHICLE_SPEED = -1;\r\n                                    e.printStackTrace();\r\n                                }\r\n\r\n                                // -------- upload offline locally saved data ---------\r\n                                UploadSavedShipmentData();\r\n                                SaveCertifyLog();\r\n                                SaveMalfnDiagnstcLogToServer(null);\r\n\r\n                                if (!SharedPref.GetOdoSavingStatus(getApplicationContext()))\r\n                                    UploadSavedOdometerData();\r\n\r\n\r\n                                if (SharedPref.getDriverType(getApplicationContext()).equals(DriverConst.TeamDriver)) {\r\n\r\n                                    // -----------------------------UnPosted inspection -----------------------------------\r\n                                    JSONArray inspectionMainDriverArray = inspectionMethod.getOfflineInspectionsArray(Integer.valueOf(DriverId), dbHelper);\r\n                                    JSONArray inspectionCoDriverArray = inspectionMethod.getOfflineInspectionsArray(Integer.valueOf(CoDriverId), dbHelper);\r\n\r\n                                    if (inspectionMainDriverArray.length() > 0) {\r\n                                        saveDriverLogPost.PostDriverLogData(inspectionMainDriverArray, APIs.SAVE_INSPECTION_OFFLINE, Constants.SocketTimeout20Sec, true, false,\r\n                                                Integer.valueOf(DriverId), SaveInspectionMain);\r\n                                    }\r\n\r\n\r\n                                    if (inspectionCoDriverArray.length() > 0) {\r\n                                        saveDriverLogPost.PostDriverLogData(inspectionCoDriverArray, APIs.SAVE_INSPECTION_OFFLINE, Constants.SocketTimeout20Sec, true, false,\r\n                                                Integer.valueOf(CoDriverId), SaveInspectionCo);\r\n                                    }\r\n\r\n\r\n                                    // -----------------------------UnPosted CT-PAT Inspection -----------------------------------\r\n                                    if (!Constants.IsCtPatUploading) {\r\n                                        JSONArray ctPatInspMainDriverArray = ctPatInspectionMethod.getCtPatUnPostedInspArray(Integer.valueOf(DriverId), dbHelper);\r\n                                        JSONArray ctPatInspCoDriverArray = ctPatInspectionMethod.getCtPatUnPostedInspArray(Integer.valueOf(CoDriverId), dbHelper);\r\n\r\n                                        if (ctPatInspMainDriverArray.length() > 0) {\r\n                                            saveDriverLogPost.PostDriverLogData(ctPatInspMainDriverArray, APIs.SAVE_17_INSPECTION_OFFLINE, Constants.SocketTimeout20Sec, true, false,\r\n                                                    Integer.valueOf(DriverId), SaveCtPatInspMain);\r\n                                        }\r\n\r\n\r\n                                        if (ctPatInspCoDriverArray.length() > 0) {\r\n                                            saveDriverLogPost.PostDriverLogData(ctPatInspCoDriverArray, APIs.SAVE_17_INSPECTION_OFFLINE, Constants.SocketTimeout20Sec, true, false,\r\n                                                    Integer.valueOf(CoDriverId), SaveCtPatInspCo);\r\n                                        }\r\n                                    }\r\n\r\n                                } else {\r\n                                    // -----------------------------UnPosted inspection -----------------------------------\r\n                                    JSONArray inspectionMainDriverArray = inspectionMethod.getOfflineInspectionsArray(Integer.valueOf(DriverId), dbHelper);\r\n                                    if (inspectionMainDriverArray.length() > 0) {\r\n                                        saveDriverLogPost.PostDriverLogData(inspectionMainDriverArray, APIs.SAVE_INSPECTION_OFFLINE, Constants.SocketTimeout20Sec, true, false,\r\n                                                Integer.valueOf(DriverId), SaveInspectionMain);\r\n                                    }\r\n\r\n\r\n                                    // -----------------------------UnPosted CT-PAT Inspection -----------------------------------\r\n                                    if (!Constants.IsCtPatUploading) {\r\n                                        JSONArray ctPatInspMainDriverArray = ctPatInspectionMethod.getCtPatUnPostedInspArray(Integer.valueOf(DriverId), dbHelper);\r\n                                        if (ctPatInspMainDriverArray.length() > 0) {\r\n                                            saveDriverLogPost.PostDriverLogData(ctPatInspMainDriverArray, APIs.SAVE_17_INSPECTION_OFFLINE, Constants.SocketTimeout20Sec, true, false,\r\n                                                    Integer.valueOf(DriverId), SaveCtPatInspMain);\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n\r\n                                // Sync data automatically if violation file occured\r\n                                SyncData(IsAutoSync);\r\n\r\n                                checkDeferralData();\r\n\r\n                            }\r\n\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n                        SaveDriverRecordLogUpdates();\r\n\r\n                        break;\r\n\r\n\r\n                    case GetRecapViewFlagMain:\r\n                    case GetRecapViewFlagCo:\r\n\r\n                        IsRecapApiACalled = false;\r\n\r\n                        try {\r\n                            if (!obj.isNull(\"Data\")) {\r\n                                JSONArray recapArray = recapViewMethod.ParseServerResponseOfArray(obj.getJSONArray(\"Data\"));\r\n\r\n                                if (flag == GetRecapViewFlagMain) {\r\n                                    recapViewMethod.RecapView18DaysHelper(Integer.valueOf(DriverId), dbHelper, recapArray);\r\n                                } else {\r\n                                    recapViewMethod.RecapView18DaysHelper(Integer.valueOf(CoDriverId), dbHelper, recapArray);\r\n                                }\r\n\r\n                                // update recap array for reCertify the log if edited\r\n                                constants.UpdateCertifyLogArray(recapViewMethod, DriverId, 7,\r\n                                        dbHelper, getApplicationContext());\r\n                            }\r\n\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n                        //  Log.d(\"response\", \"Service response GetRecapViewData-\" + flag + \": \" + response);\r\n                        break;\r\n\r\n\r\n                    case GetOdometers18Days:\r\n\r\n                        try {\r\n                            if (!obj.isNull(\"Data\")) {\r\n                                JSONArray resultArray = new JSONArray(obj.getString(\"Data\"));\r\n                                odometerhMethod.Odometer18DaysHelper(Integer.valueOf(DriverId), dbHelper, resultArray);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n\r\n                        break;\r\n\r\n                    case GetCtPat18DaysMainDriverLog:\r\n\r\n                        try {\r\n                            if (!obj.isNull(\"Data\")) {\r\n                                try {\r\n                                    JSONArray inspectionData = new JSONArray(obj.getString(\"Data\"));\r\n\r\n                                    ctPatInspectionMethod.DriverCtPatInsp18DaysHelper(Integer.valueOf(DriverId), dbHelper, inspectionData);\r\n\r\n\r\n                                } catch (JSONException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case GetCtPat18DaysCoDriverLog:\r\n\r\n                        try {\r\n                            if (!obj.isNull(\"Data\")) {\r\n                                try {\r\n                                    JSONArray inspectionData = new JSONArray(obj.getString(\"Data\"));\r\n\r\n                                    ctPatInspectionMethod.DriverCtPatInsp18DaysHelper(Integer.valueOf(CoDriverId), dbHelper, inspectionData);\r\n\r\n\r\n                                } catch (JSONException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case SaveDriverDeviceUsageLog:\r\n                        try {\r\n                            SharedPref.setLastUsageDataSavedTime(global.getCurrentDate(), getApplicationContext());\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        break;\r\n\r\n\r\n                }\r\n            }else{\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    VolleyRequest.VolleyErrorCall ErrorCallBack = new VolleyRequest.VolleyErrorCall(){\r\n\r\n        @Override\r\n        public void getError(VolleyError error, int flag) {\r\n            //  Log.d(\"error\", \"error-\" +flag + \" : \" + error);\r\n            switch (flag) {\r\n\r\n                case GetRecapViewFlagMain:\r\n                case GetRecapViewFlagCo:\r\n\r\n                    IsRecapApiACalled = false;\r\n\r\n                     /*   if (recapViewMethod.getSavedRecapView18DaysArray(Integer.valueOf(DriverId), dbHelper).length() == 0) {\r\n                           Recap18DaysLog();\r\n                        }\r\n                    */\r\n\r\n\r\n                    break;\r\n\r\n                case UpdateOffLineStatus:\r\n\r\n                    if(updateOfflineNoResponseCount > 0) {\r\n                        constants.IsAlsServerResponding = false;\r\n                    }\r\n\r\n                    updateOfflineNoResponseCount++;\r\n                  //  VehicleSpeed = GpsVehicleSpeed;\r\n                    apiReturnedSpeed = \"--\";\r\n                    Globally.VEHICLE_SPEED = -1;\r\n\r\n                    break;\r\n\r\n\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    AsyncResponse asyncResponse = new AsyncResponse() {\r\n        @Override\r\n        public void onAsyncResponse(String response, String DriverId) {\r\n\r\n            Log.e(\"String Response\", \">>>Sync Response:  \" + response);\r\n\r\n            try {\r\n\r\n                JSONObject obj = new JSONObject(response);\r\n                String status = obj.getString(\"Status\");\r\n                if (status.equalsIgnoreCase(\"true\")) {\r\n\r\n                    String msgTxt = \"Data syncing is completed\" ;\r\n                    /* ------------ Delete posted files from local after successfully posted to server --------------- */\r\n                    if(syncingFile != null && syncingFile.exists()) {\r\n                        syncingFile.delete();\r\n                        syncingFile = null;\r\n                    }\r\n\r\n\r\n                    if (ViolationFile != null && ViolationFile.exists()) {\r\n                        msgTxt = \"Data syncing is completed with violation log file\";\r\n                        ViolationFile.delete();\r\n                        ViolationFile = null;\r\n                    }\r\n\r\n\r\n                    syncingMethod.SyncingLogHelper(Integer.valueOf(DriverId), dbHelper, new JSONArray());\r\n\r\n                    Log.d(\"Sync\", msgTxt );\r\n\r\n                }else {\r\n                    if(syncingFile != null && syncingFile.exists())\r\n                        syncingFile.delete();\r\n\r\n                    if(ViolationFile != null && ViolationFile.exists())\r\n                        ViolationFile.delete();\r\n                }\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    RequestResponse requestResponse = new RequestResponse() {\r\n        @Override\r\n        public void onApiResponse(String response, int flag) {\r\n\r\n            String status = \"\", message = \"\";\r\n            try {\r\n                JSONObject obj = new JSONObject(response);\r\n                status = obj.getString(\"Status\");\r\n                message = obj.getString(\"Message\");\r\n\r\n                if (status.equalsIgnoreCase(\"true\")) {\r\n                    switch (flag) {\r\n\r\n\r\n                        case SaveShippingOffline:\r\n                            //  JSONObject obj = shipmentHelper.GetLastJsonObject(shipmentArray, shipmentArray.length()-1);\r\n                            //   JSONArray shipmentJsonArray = new JSONArray();\r\n                            //   shipmentJsonArray.put(obj);\r\n                            shipmentHelper.ShipmentHelper(Integer.valueOf(global.PROJECT_ID), dbHelper, new JSONArray());\r\n\r\n                            break;\r\n\r\n\r\n                        case SaveOdometerOffline:\r\n                            SharedPref.SetOdoSavingStatus(false, getApplicationContext());\r\n                            odometerHelper.OdometerHelper(Integer.valueOf(DriverId), dbHelper, new JSONArray());\r\n\r\n                            String CompanyId = \"\", SelectedDate = \"\";\r\n                            SelectedDate = Globally.GetCurrentDeviceDate();\r\n                            DriverId   = SharedPref.getDriverId(getApplicationContext());\r\n                            if(SharedPref.getCurrentDriverType(getApplicationContext()).equals(DriverConst.StatusSingleDriver)) {  // If Current driver is Main Driver\r\n                                CompanyId     = DriverConst.GetDriverDetails(DriverConst.CompanyId, getApplicationContext());\r\n                            } else {                                                                                 // If Current driver is Co Driver\r\n                                CompanyId     = DriverConst.GetCoDriverDetails(DriverConst.CoCompanyId, getApplicationContext());\r\n                            }\r\n\r\n                            GetOdometer18Days(DriverId, DeviceId, CompanyId, SelectedDate);\r\n\r\n                            break;\r\n\r\n                        case Save2ndDriverOdoData:\r\n                            odometerHelper.OdometerHelper(SecondDriver, dbHelper, new JSONArray());\r\n                            break;\r\n\r\n\r\n                    }\r\n                }else{\r\n                    if (status.equalsIgnoreCase(\"false\")) {\r\n                        if (message.equalsIgnoreCase(\"Device Logout\")) {\r\n                            DeviceLogout(message);\r\n                        }\r\n                    }\r\n                }\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onResponseError(String error, int flag) {\r\n            Log.d(\"shipmentJsonArray \", \">>>Error\");\r\n            if(SaveOdometerOffline == flag){\r\n                SharedPref.SetOdoSavingStatus(false, getApplicationContext());\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    ServiceCycle.ServiceCallback serviceCallBack = new ServiceCycle.ServiceCallback() {\r\n        @Override\r\n        public void onServiceResponse(RulesResponseObject RulesObj, RulesResponseObject RemainingTimeObj, boolean IsForground,\r\n                                      boolean isEldToast, String msg, String status) {\r\n\r\n            String violatioReason = RulesObj.getViolationReason().trim();\r\n\r\n            if(isEldToast){\r\n                if(!status.equals(getApplicationContext().getResources().getString(R.string.screen_reset))) {\r\n                    global.ShowNotificationWithSound(getApplicationContext(), \"ELD\", msg, mNotificationManager);\r\n                }\r\n\r\n                if(IsForground){\r\n                    try {\r\n                        // Update Eld home screen UI\r\n                        new Handler().postDelayed(new Runnable() {\r\n                            @Override\r\n                            public void run() {\r\n                               // Thread.sleep(4000);\r\n                                Intent intent = new Intent();\r\n                                intent.putExtra(\"isUpdate\", \"true\");\r\n                                intent.setAction(constants.packageName);\r\n                                sendBroadcast(intent);\r\n\r\n                            }\r\n                        }, 4000);\r\n\r\n                    }catch (Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n            }else {\r\n                if(msg.equals(Constants.AobrdWarning)){\r\n                    global.ShowNotificationWithSound(getApplicationContext(), \"AOBRD\", \"Your current status is \"+ status +\" but your vehicle is running.\", mNotificationManager);\r\n\r\n                    // Play again\r\n                    //playSound();\r\n\r\n                }else if(msg.equals(Constants.AobrdAutomatic)) {\r\n                    //  global.ShowNotificationWithSound(getApplicationContext(), \"AOBRD\", status, mNotificationManager);\r\n                }else if(msg.contains(getApplicationContext().getResources().getString(R.string.als_alert))){\r\n                    global.ShowNotificationWithSound(getApplicationContext(), \"ALS Alert\", status, mNotificationManager);\r\n                }else {\r\n                    if (SharedPref.IsReadViolation(getApplicationContext()) == false) {\r\n                        if (RulesObj.isViolation() ) {\r\n                            if(IsForground){\r\n                                global.PlaySound(getApplicationContext());\r\n                                ViolationReason = violatioReason;\r\n                                // SpeakOutMsg();\r\n                            } else {\r\n\r\n                                if(!violatioReason.equalsIgnoreCase(\"Alert\") && violatioReason.equals(\"\")) {\r\n                                    RulesObj.setNotificationType(101);\r\n                                    global.ShowNotificationWithSound(getApplicationContext(), RulesObj, mNotificationManager);\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    ServiceCycle.ServiceError serviceError = new ServiceCycle.ServiceError() {\r\n        @Override\r\n        public void onServiceError(String error, boolean IsForground) {\r\n            Log.d(\"error: \", \"error: \" + error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    /* ---------------------- Save Log Request Response ---------------- */\r\n    DriverLogResponse saveLogRequestResponse = new DriverLogResponse() {\r\n        @RequiresApi(api = Build.VERSION_CODES.KITKAT)\r\n        @Override\r\n        public void onApiResponse(String response, boolean isLoad, boolean IsRecap, int driver_id, int flag) {\r\n            // SaveDriverLog\r\n            String status = \"\", Message = \"\";\r\n            try {\r\n                // String responseee = \"{\\\"Status\\\":true,\\\"Message\\\":\\\"Record Successfully Saved\\\",\\\"Data\\\":null}\";\r\n                JSONObject obj = new JSONObject(response);\r\n                status = obj.getString(\"Status\");\r\n                Message = obj.getString(\"Message\");\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n\r\n            if (status.equals(\"true\")) {\r\n                switch (flag) {\r\n\r\n                    case SaveDeferralMain:\r\n                        // clear main driver deferral events from local db\r\n                        deferralMethod.DeferralLogHelper(Integer.valueOf(DriverId), dbHelper, new JSONArray());\r\n\r\n                        break;\r\n\r\n                    case SaveDeferralCo:\r\n                        // clear main driver deferral events from local db\r\n                        deferralMethod.DeferralLogHelper(Integer.valueOf(CoDriverId), dbHelper, new JSONArray());\r\n\r\n                        break;\r\n\r\n\r\n                    case SaveMainDriverLogData:\r\n                        BackgroundLocationService.IsAutoChange = false;\r\n\r\n                        if (driverLogArray.length() == 1) {\r\n                            ClearLogAfterSuccess(driver_id);\r\n\r\n                            // save Co Driver Data is login with co driver\r\n                            SaveCoDriverData();\r\n                        }else{\r\n\r\n                            if(RePostDataCountMain > 1){\r\n                                ClearLogAfterSuccess(driver_id);\r\n                                RePostDataCountMain = 0;\r\n                            }else {\r\n                                saveActiveDriverData();\r\n                                RePostDataCountMain ++;\r\n                            }\r\n\r\n                        }\r\n\r\n                        break;\r\n\r\n\r\n                    case SaveCoDriverLogData:\r\n\r\n                        if(RePostDataCountCo > 1){\r\n                            ClearLogAfterSuccess(driver_id);\r\n                            RePostDataCountCo = 0;\r\n                        }else {\r\n                            SaveCoDriverData();\r\n                            RePostDataCountCo ++;\r\n                        }\r\n\r\n\r\n                        break;\r\n\r\n\r\n                    case SaveDriverLog:\r\n\r\n                        //    constants.ClearNotifications(getApplicationContext());\r\n                        // ------------ Clear Driver Log Record File locally ------------\r\n                        logRecordMethod.UpdateLogRecordHelper(Integer.valueOf(DriverId), dbHelper, new JSONArray());\r\n\r\n                        break;\r\n\r\n\r\n                    case SaveCertifyLog:\r\n                        // ------------ Clear Certify Log Record File locally ------------\r\n                        certifyLogMethod.CertifyLogHelper(Integer.valueOf(DriverId), dbHelper, new JSONArray());\r\n\r\n                        break;\r\n\r\n\r\n                    case SaveInspectionMain:\r\n                    case SaveInspectionCo:\r\n                        // Clear all unposted Array from list......\r\n                        inspectionMethod.DriverOfflineInspectionsHelper(driver_id, dbHelper, new JSONArray());\r\n\r\n                        break;\r\n\r\n\r\n                    case SaveCtPatInspMain:\r\n                    case SaveCtPatInspCo:\r\n                        // Clear all unposted CT-PAT Array from list......\r\n                        ctPatInspectionMethod.DriverCtPatUnPostedInspHelper(driver_id, dbHelper, new JSONArray());\r\n\r\n                        break;\r\n\r\n\r\n                    case SaveMalDiagnstcEvent:\r\n                        isMalfncDataAlreadyPosting = false;\r\n                        // clear malfunction array\r\n                        malfunctionDiagnosticMethod.MalfnDiagnstcLogHelper(Integer.parseInt(DriverId), dbHelper, new JSONArray());\r\n                        break;\r\n                }\r\n            }else {\r\n\r\n                if(flag == SaveMainDriverLogData || flag == SaveCoDriverLogData) {\r\n                    if (Message.equalsIgnoreCase(\"Duplicate Records\")) {\r\n                        ClearLogAfterSuccess(driver_id);\r\n                        Log.d(\"flag\", \"flag: \" + flag);\r\n\r\n                        if(flag == SaveMainDriverLogData){\r\n                            SaveCoDriverData();\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n        }\r\n        @Override\r\n        public void onResponseError(String error, boolean isLoad, boolean IsRecap, int DriverType, int flag) {\r\n            Log.d(\"errorrr \", \">>>error dialog: \" );\r\n\r\n        }\r\n    };\r\n\r\n\r\n\r\n    void ClearLogAfterSuccess(int driverType) {\r\n        driverLogArray = new JSONArray();\r\n        if (driverType == 0) // Single Driver Type and Position is 0\r\n            MainDriverPref.ClearLocFromList(getApplicationContext());\r\n        else\r\n            CoDriverPref.ClearLocFromList(getApplicationContext());\r\n\r\n    }\r\n\r\n\r\n\r\n    /* ------------ Save Co-Driver Data those data was saved in offline mode -------------- */\r\n    void SaveCoDriverData() {\r\n        JSONArray LogArray = new JSONArray();\r\n        int SecondDriverType = 0;\r\n        int logArrayCount = 0, socketTimeout = 10000;\r\n\r\n        if (!global.isSingleDriver(getApplicationContext())) {\r\n\r\n            String SavedLogApi = \"\";\r\n            if (SharedPref.IsEditedData(getApplicationContext())) {\r\n                SavedLogApi = APIs.SAVE_DRIVER_EDIT_LOG_NEW;\r\n            } else {\r\n                SavedLogApi = APIs.SAVE_DRIVER_STATUS;\r\n            }\r\n\r\n\r\n\r\n            if(DriverType == Constants.MAIN_DRIVER_TYPE) {  // Current active driver is Main Driver. So we need co driver details and we are getting co driver's details.\r\n\r\n                try {\r\n                    SecondDriverType = 1;   // Co Driver\r\n\r\n                    LogArray = constants.GetDriverOffLineSavedLog(getApplicationContext(), SecondDriverType, MainDriverPref, CoDriverPref);\r\n                    logArrayCount = LogArray.length();\r\n                    if(logArrayCount < 3 ){\r\n                        socketTimeout = constants.SocketTimeout10Sec;  //10 seconds\r\n                    }else if(logArrayCount < 10){\r\n                        socketTimeout = constants.SocketTimeout20Sec;  //20 seconds\r\n                    }else{\r\n                        socketTimeout = constants.SocketTimeout40Sec;  //40 seconds\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                if (LogArray.length() > 0) {\r\n                    saveDriverLogPost.PostDriverLogData(LogArray, SavedLogApi, socketTimeout, false, false, SecondDriverType, SaveCoDriverLogData);\r\n                }\r\n\r\n            } else {\r\n                // Current active driver is Co Driver. So we need main driver details and we are getting main driver's details.\r\n                try {\r\n\r\n                    SecondDriverType = 0;\r\n                    LogArray = constants.GetDriverOffLineSavedLog(getApplicationContext(), SecondDriverType, MainDriverPref, CoDriverPref);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                if (LogArray.length() > 0) {\r\n                    saveDriverLogPost.PostDriverLogData(LogArray, SavedLogApi, socketTimeout, false, false, SecondDriverType, SaveCoDriverLogData);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    void playSound(){\r\n        try{\r\n            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    global.PlaySound(getApplicationContext());\r\n                }\r\n            }, 3000);\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    void networkUsage() {\r\n\r\n        try {\r\n            long mobileBytes = TrafficStats.getMobileRxBytes();\r\n            long totalBytes = TrafficStats.getTotalRxBytes();\r\n            MobileUsage = constants.convertLongDataToMb(mobileBytes);\r\n            TotalUsage = constants.convertLongDataToMb(totalBytes);\r\n\r\n            //  Log.e(TAG_DATA_STAT , \"Data Mobile: \" + MobileUsage);\r\n            //   Log.e(TAG_DATA_STAT , \"Data Total: \" + TotalUsage);\r\n        }catch (Exception e){\r\n            MobileUsage = \"-1\";\r\n            TotalUsage = \"-1\";\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // Get running processes\r\n        try {\r\n            ActivityManager manager = (ActivityManager) getApplicationContext().getSystemService(getApplicationContext().ACTIVITY_SERVICE);\r\n            List<ActivityManager.RunningAppProcessInfo> runningApps = manager.getRunningAppProcesses();\r\n            for (ActivityManager.RunningAppProcessInfo runningApp : runningApps) {\r\n                long received = TrafficStats.getUidRxBytes(runningApp.uid);\r\n                long sent = TrafficStats.getUidTxBytes(runningApp.uid);\r\n\r\n                AlsReceivedData = constants.convertLongDataToMb(received);\r\n                AlsSendingData = constants.convertLongDataToMb(sent);\r\n                //Log.e(TAG_DATA_STAT , \"Data ALS received: \" + AlsReceivedData);\r\n                // Log.e(TAG_DATA_STAT , \"Data ALS Sent: \" + AlsSendingData);\r\n                // Log.d(\"data_nw_usage\", String.format(Locale.getDefault(),\"uid: %1d - name: %s: Sent = %1d, Rcvd = %1d\", runningApp.uid, runningApp.processName, sent, received));\r\n            }\r\n        }catch (Exception e){\r\n            AlsReceivedData = \"-1\";\r\n            AlsSendingData = \"-1\";\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //  ------------- Wired OBD ----------\r\n    //Bind to the remote service\r\n    private void BindConnection(){\r\n        try{\r\n            Intent intent = new Intent();\r\n            intent.setClassName(ServerPackage, ServerService);\r\n            this.bindService(intent, this.connection, Context.BIND_AUTO_CREATE);\r\n\r\n        }catch (Exception e){ }\r\n\r\n    }\r\n\r\n\r\n    void saveExecutionTime(String type){\r\n        if(processStartTime != -1){\r\n            try {\r\n                long stopTime = System.currentTimeMillis();\r\n                long elapsedTime = stopTime - processStartTime;\r\n                String usedMemory = constants.getMemoryUsage(getApplicationContext());\r\n                obdUtil.writeExectnTimeLogFile(elapsedTime, usedMemory, type);\r\n\r\n                obdUtil.executionLogCount();\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void StartStopServer(final String value){\r\n        if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_WIRED) {\r\n            if (isBound) {\r\n\r\n                mHandler.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        //Setup the message for invocation\r\n                        try {\r\n                            Log.d(TAG_OBD, \"Invocation Failed!!\");\r\n\r\n                            //Set the ReplyTo Messenger for processing the invocation response\r\n                            Message msg1 = new Handler().obtainMessage();\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putString(\"key\", value);\r\n                            msg1.setData(bundle);\r\n                            msg1.replyTo = replyTo;\r\n\r\n                            //Make the invocation\r\n                            messenger.send(msg1);\r\n                           // bundle.clear();\r\n\r\n                        } catch (Exception rme) {\r\n                            Log.d(TAG_OBD, \"Invocation Failed!!\");\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } else {\r\n                try {\r\n                    Log.d(TAG_OBD, \"Service is Not Bound!!\");\r\n                    this.connection = new RemoteServiceConnection();\r\n                    BindConnection();\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private class RemoteServiceConnection implements ServiceConnection\r\n    {\r\n        @Override\r\n        public void onServiceConnected(ComponentName component, IBinder binder)\r\n        {\r\n            messenger = new Messenger(binder);\r\n            isBound = true;\r\n           /* if(ServiceConnectedCount < 2) {\r\n                StartStopServer(constants.WiredOBD);\r\n            }\r\n            ServiceConnectedCount++;*/\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onServiceDisconnected(ComponentName component)\r\n        {\r\n            messenger = null;\r\n            isBound = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    void DeviceLogout(String message){\r\n        EldActivity activity = EldActivity.instance;\r\n\r\n        global.ClearAllFields(getApplicationContext());\r\n        StopService();\r\n\r\n        if (activity != null) {\r\n\r\n            global.ShowLocalNotification(getApplicationContext(), \"ELD eBook\", message, 2003);\r\n\r\n            Intent i = new Intent(activity, LoginActivity.class);\r\n            activity.startActivity(i);\r\n            activity.finish();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/background/service/BackgroundLocationService.java	(revision d165b09a4d41de74439f675181b973bf740c8502)
+++ app/src/main/java/com/background/service/BackgroundLocationService.java	(date 1626677398479)
@@ -296,7 +296,9 @@
     String MobileUsage = "";
     String TotalUsage = "";
     long processStartTime = -1;
+
     double tempOdo = 518927.60000000003;
+    //int tempOdo = 11515;
     int tempSpeed = 0;
     int ignitionCount = 0;
 
@@ -416,10 +418,8 @@
             if(!BleManager.getInstance().isConnected(bleDevice) && SharedPref.getObdStatus(getApplicationContext()) != Constants.BLE_DISCONNECTED){
                 SharedPref.SaveObdStatus(Constants.BLE_DISCONNECTED, global.getCurrentDate(), getApplicationContext());
             }
-        }else{
-            if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_WIRED) {
-                checkWiredObdConnection(wifiConfig.IsAlsNetworkConnected(getApplicationContext()));
-            }
+        }else if(SharedPref.getObdPreference(getApplicationContext()) == Constants.OBD_PREF_WIRED) {
+             checkWiredObdConnection(wifiConfig.IsAlsNetworkConnected(getApplicationContext()));
         }
 
         try{
@@ -463,7 +463,7 @@
                     currentHighPrecisionOdometer = bundle.getString(constants.OBD_HighPrecisionOdometer);
                 }
 
-                sendBroadCast(getWiredData(vin, speed));
+                sendBroadCast(getWiredData(vin, speed, -1));
 
                 // save wired obd call response time to recheck later
                  SharedPref.SetWiredObdCallTime(Globally.GetCurrentDateTime(), getApplicationContext());
@@ -529,10 +529,12 @@
 
 
         // ---------------- temp data ---------------------
-           /*  ignitionStatus = "ON"; truckRPM = "700"; speed = 15; obdEngineHours = "123959";
+
+            /* ignitionStatus = "ON"; truckRPM = "700"; speed = 15; obdEngineHours = "123959";
               ignitionCount++;
               obdOdometer = String.valueOf(tempOdo);
-                tempOdo = tempOdo + 500;
+                tempOdo = tempOdo + 100;
+
               currentHighPrecisionOdometer = obdOdometer;
               SharedPref.SetWiredObdOdometer(obdOdometer, getApplicationContext());
             SharedPref.SaveObdStatus(Constants.WIRED_CONNECTED, global.getCurrentDate(), getApplicationContext());
@@ -609,6 +611,9 @@
                             SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, currentLogDate, getApplicationContext());
                         }
 
+                        // calculating speed to comparing last saved odometer and current odometer (in meter) with time difference in seconds
+                        double calculatedSpeedFromOdo = 0;
+
                         boolean isDrivingAllowed = true;
                         if (SharedPref.isDrivingAllowed(getApplicationContext()) == false && speed >= 8) {
                             final DateTime currentDateTime = global.getDateTimeObj(global.GetCurrentDateTime(), false);    // Current Date Time
@@ -628,13 +633,17 @@
                         double savedOdometer = Double.parseDouble(previousHighPrecisionOdometer);
                         if (obdOdometerDouble >= savedOdometer) {    // needs for this check is to avoid the wrong auto change status because some times odometers are not coming
 
-                            double calculatedSpeedFromOdo = speed;
-
+                            calculatedSpeedFromOdo = speed;
                             if(OBD_LAST_STATUS == constants.WIRED_CONNECTED) {
                                 // calculating speed to comparing last saved odometer and current odometer (in meter) with time difference in seconds
                                 calculatedSpeedFromOdo = constants.calculateSpeedFromWiredTabOdometer(savedDate, currentLogDate,
                                         previousHighPrecisionOdometer, currentHighPrecisionOdometer, getApplicationContext());
+
+                                sendBroadCast(getWiredData(vin, speed, calculatedSpeedFromOdo));
+
                             }
+
+
 
                             if (speed >= 8 || calculatedSpeedFromOdo >= 8) {
                                 SharedPref.setVehilceMovingStatus(true, getApplicationContext());
@@ -885,7 +894,10 @@
                                     timeDuration = Constants.SocketTimeout30Sec;
                                 }else{
                                     timeDuration = Constants.SocketTimeout8Sec;
+
                                     SharedPref.saveHighPrecisionOdometer(currentHighPrecisionOdometer, currentLogDate, getApplicationContext());
+
+
                                 }
 
                             }else{
@@ -926,12 +938,13 @@
         }
     }
 
-    String getWiredData(String vin, int speed){
+    String getWiredData(String vin, int speed, double calculatedSpeed){
         return    "<b>ignitionStatus:</b> " + ignitionStatus + "<br/>" +
                 "<b>Truck RPM:</b> " + truckRPM + "<br/>" +
                 "<b>Odometer:</b> " + obdOdometer + "<br/>" +
                 "<b>currentHighPrecisionOdometer:</b> " + currentHighPrecisionOdometer + "<br/>" +
                 "<b>Speed:</b> " + speed + "<br/>" +
+                "<b>Calculated Speed:</b> " + calculatedSpeed + "<br/>" +
                 "<b>VIN:</b> " + vin + "<br/>" +
                 "<b>Trip Distance:</b> " + obdTripDistance + "<br/>" +
                 "<b>EngineHours:</b> " + obdEngineHours + "<br/>" ;
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GitSharedSettings\">\r\n    <option name=\"FORCE_PUSH_PROHIBITED_PATTERNS\">\r\n      <list />\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision d165b09a4d41de74439f675181b973bf740c8502)
+++ .idea/vcs.xml	(date 1626680557732)
@@ -7,5 +7,6 @@
   </component>
   <component name="VcsDirectoryMappings">
     <mapping directory="" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
